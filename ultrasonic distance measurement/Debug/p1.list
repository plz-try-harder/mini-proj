
p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f40  08005f40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f48  08005f48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08005fc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005fc0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001103b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  000310db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00034208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bc4  00000000  00000000  00035098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dcb  00000000  00000000  00056c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb6c  00000000  00000000  00067a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  001345e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e30 	.word	0x08005e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005e30 	.word	0x08005e30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
if( (htim->Instance==TIM1) && (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2) ) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_TIM_IC_CaptureCallback+0x48>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d116      	bne.n	80005b4 <HAL_TIM_IC_CaptureCallback+0x40>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7f1b      	ldrb	r3, [r3, #28]
 800058a:	2b02      	cmp	r3, #2
 800058c:	d112      	bne.n	80005b4 <HAL_TIM_IC_CaptureCallback+0x40>
// timer counter counts 10μs
uint32_t lo = HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 );
 800058e:	2104      	movs	r1, #4
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f003 f925 	bl	80037e0 <HAL_TIM_ReadCapturedValue>
 8000596:	60f8      	str	r0, [r7, #12]
uint32_t distance_mm = (lo * 340/2)/100;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800059e:	fb02 f303 	mul.w	r3, r2, r3
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80005a4:	fba2 2303 	umull	r2, r3, r2, r3
 80005a8:	099b      	lsrs	r3, r3, #6
 80005aa:	60bb      	str	r3, [r7, #8]
printf("distance: %03lu mm\r\n", distance_mm );
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0x50>)
 80005b0:	f004 fcb0 	bl	8004f14 <iprintf>
}
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40012c00 	.word	0x40012c00
 80005c0:	51eb851f 	.word	0x51eb851f
 80005c4:	08005e48 	.word	0x08005e48

080005c8 <_write>:
int _write(int file, char *ptr, int len)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
HAL_UART_Transmit( &huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY );
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_write+0x28>)
 80005e0:	f003 fff6 	bl	80045d0 <HAL_UART_Transmit>
return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000124 	.word	0x20000124

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fc63 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f81a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f9f4 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f9c2 	bl	800098c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000608:	f000 f876 	bl	80006f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060c:	f000 f970 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1 , TIM_CHANNEL_4);
 8000610:	210c      	movs	r1, #12
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <main+0x3c>)
 8000614:	f002 f9ba 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000618:	2100      	movs	r1, #0
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0x3c>)
 800061c:	f002 faf6 	bl	8002c0c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000620:	2104      	movs	r1, #4
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <main+0x3c>)
 8000624:	f002 fbd2 	bl	8002dcc <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
	  //HAL_Delay(1000);
	  HAL_TIM_IC_CaptureCallback(&htim1);
 8000628:	4801      	ldr	r0, [pc, #4]	; (8000630 <main+0x3c>)
 800062a:	f7ff ffa3 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 800062e:	e7fb      	b.n	8000628 <main+0x34>
 8000630:	2000008c 	.word	0x2000008c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	; 0x58
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fc5e 	bl	8004f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000656:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065a:	f000 ff59 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000664:	f000 fa0c 	bl	8000a80 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000668:	f000 ff34 	bl	80014d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0xc0>)
 800066e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xc0>)
 8000674:	f023 0318 	bic.w	r3, r3, #24
 8000678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800067c:	2314      	movs	r3, #20
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000694:	2301      	movs	r3, #1
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ff83 	bl	80015bc <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f9e0 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2303      	movs	r3, #3
 80006c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fb83 	bl	8001de4 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006e4:	f000 f9cc 	bl	8000a80 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e8:	f001 ff96 	bl	8002618 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ec:	bf00      	nop
 80006ee:	3758      	adds	r7, #88	; 0x58
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0a2      	sub	sp, #136	; 0x88
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800070c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800071c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	222c      	movs	r2, #44	; 0x2c
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fbd7 	bl	8004f04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000756:	4b64      	ldr	r3, [pc, #400]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000758:	4a64      	ldr	r2, [pc, #400]	; (80008ec <MX_TIM1_Init+0x1f4>)
 800075a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 800075c:	4b62      	ldr	r3, [pc, #392]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 800075e:	f240 123f 	movw	r2, #319	; 0x13f
 8000762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000-1;
 800076a:	4b5f      	ldr	r3, [pc, #380]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 800076c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000770:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b5d      	ldr	r3, [pc, #372]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000778:	4b5b      	ldr	r3, [pc, #364]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b5a      	ldr	r3, [pc, #360]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000784:	4858      	ldr	r0, [pc, #352]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000786:	f002 f849 	bl	800281c <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000790:	f000 f976 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800079e:	4619      	mov	r1, r3
 80007a0:	4851      	ldr	r0, [pc, #324]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 80007a2:	f002 ff11 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80007ac:	f000 f968 	bl	8000a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007b0:	484d      	ldr	r0, [pc, #308]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 80007b2:	f002 f88a 	bl	80028ca <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007bc:	f000 f960 	bl	8000a80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007c0:	4849      	ldr	r0, [pc, #292]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 80007c2:	f002 f9c1 	bl	8002b48 <HAL_TIM_IC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80007cc:	f000 f958 	bl	8000a80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007d0:	2304      	movs	r3, #4
 80007d2:	667b      	str	r3, [r7, #100]	; 0x64
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80007d4:	2350      	movs	r3, #80	; 0x50
 80007d6:	66bb      	str	r3, [r7, #104]	; 0x68
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007d8:	2300      	movs	r3, #0
 80007da:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	673b      	str	r3, [r7, #112]	; 0x70
  sSlaveConfig.TriggerFilter = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007e8:	4619      	mov	r1, r3
 80007ea:	483f      	ldr	r0, [pc, #252]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 80007ec:	f002 ffb5 	bl	800375a <HAL_TIM_SlaveConfigSynchro>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80007f6:	f000 f943 	bl	8000a80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007fa:	2300      	movs	r3, #0
 80007fc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007fe:	2301      	movs	r3, #1
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigIC.ICFilter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800080a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4835      	ldr	r0, [pc, #212]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000814:	f002 fd27 	bl	8003266 <HAL_TIM_IC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800081e:	f000 f92f 	bl	8000a80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000822:	2302      	movs	r3, #2
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000826:	2302      	movs	r3, #2
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800082a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	482d      	ldr	r0, [pc, #180]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000834:	f002 fd17 	bl	8003266 <HAL_TIM_IC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800083e:	f000 f91f 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000852:	4619      	mov	r1, r3
 8000854:	4824      	ldr	r0, [pc, #144]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000856:	f003 fd71 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8000860:	f000 f90e 	bl	8000a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000864:	2360      	movs	r3, #96	; 0x60
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 20000-1;
 8000868:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	220c      	movs	r2, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4818      	ldr	r0, [pc, #96]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 8000888:	f002 fd8a 	bl	80033a0 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000892:	f000 f8f5 	bl	8000a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 80008cc:	f003 fd9c 	bl	8004408 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x1e2>
  {
    Error_Handler();
 80008d6:	f000 f8d3 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <MX_TIM1_Init+0x1f0>)
 80008dc:	f000 f958 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 80008e0:	bf00      	nop
 80008e2:	3788      	adds	r7, #136	; 0x88
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000008c 	.word	0x2000008c
 80008ec:	40012c00 	.word	0x40012c00

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM2_Init+0x94>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_TIM2_Init+0x94>)
 8000918:	221f      	movs	r2, #31
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_TIM2_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_TIM2_Init+0x94>)
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <MX_TIM2_Init+0x98>)
 8000926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_TIM2_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_TIM2_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_TIM2_Init+0x94>)
 8000936:	f001 ff71 	bl	800281c <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000940:	f000 f89e 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_TIM2_Init+0x94>)
 8000952:	f002 fe39 	bl	80035c8 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 f890 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_TIM2_Init+0x94>)
 800096e:	f003 fce5 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f882 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000d8 	.word	0x200000d8
 8000988:	0001869f 	.word	0x0001869f

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART2_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009d0:	f003 fdb0 	bl	8004534 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f851 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000124 	.word	0x20000124
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_GPIO_Init+0x8c>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a50:	f000 fd28 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a54:	2308      	movs	r3, #8
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_GPIO_Init+0x90>)
 8000a6c:	f000 fbb0 	bl	80011d0 <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000400 	.word	0x48000400

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a25      	ldr	r2, [pc, #148]	; (8000b88 <HAL_TIM_Base_MspInit+0xb4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d132      	bne.n	8000b5c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f000 fb43 	bl	80011d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	201b      	movs	r0, #27
 8000b50:	f000 fb07 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b54:	201b      	movs	r0, #27
 8000b56:	f000 fb20 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b5a:	e010      	b.n	8000b7e <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b64:	d10b      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_TIM_Base_MspInit+0xb8>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012c00 	.word	0x40012c00
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_TIM_MspPostInit+0x68>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d11d      	bne.n	8000bee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_TIM_MspPostInit+0x6c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_TIM_MspPostInit+0x6c>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_TIM_MspPostInit+0x6c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 faf1 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09e      	sub	sp, #120	; 0x78
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	2254      	movs	r2, #84	; 0x54
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 f96f 	bl	8004f04 <memset>
  if(huart->Instance==USART2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <HAL_UART_MspInit+0xcc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d148      	bne.n	8000cc2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 faf5 	bl	800222c <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c48:	f7ff ff1a 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c56:	6593      	str	r3, [r2, #88]	; 0x58
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0xd0>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f000 fa99 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f000 fa87 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3778      	adds	r7, #120	; 0x78
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f924 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM1_CC_IRQHandler+0x10>)
 8000d2e:	f002 f97b 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000008c 	.word	0x2000008c

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 f84e 	bl	8004eb0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20010000 	.word	0x20010000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200001a8 	.word	0x200001a8
 8000e48:	200001c0 	.word	0x200001c0

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 f80d 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fba7 	bl	80005f4 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	200001c0 	.word	0x200001c0

08000ec0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_IRQHandler>

08000ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f93d 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f80e 	bl	8000ef4 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee4:	f7ff fdd2 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_InitTick+0x70>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f949 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10f      	bne.n	8000f4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d809      	bhi.n	8000f44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	f000 f913 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_InitTick+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e004      	b.n	8000f54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e001      	b.n	8000f54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200001ac 	.word	0x200001ac

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200001ac 	.word	0x200001ac

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e148      	b.n	8001472 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 813a 	beq.w	800146c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8094 	beq.w	800146c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	4b52      	ldr	r3, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001348:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6613      	str	r3, [r2, #96]	; 0x60
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135c:	4a4d      	ldr	r2, [pc, #308]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	220f      	movs	r2, #15
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x1d4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a43      	ldr	r2, [pc, #268]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x1d0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_GPIO_Init+0x2cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <HAL_GPIO_Init+0x1cc>
 8001398:	2302      	movs	r3, #2
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 800139c:	2307      	movs	r3, #7
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a4:	2300      	movs	r3, #0
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b6:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e8:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	f47f aeaf 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f000 bc02 	b.w	8001dd4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d0:	4b96      	ldr	r3, [pc, #600]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80e4 	beq.w	80017ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <HAL_RCC_OscConfig+0x4c>
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	f040 808b 	bne.w	8001716 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b01      	cmp	r3, #1
 8001604:	f040 8087 	bne.w	8001716 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001608:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x64>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e3d9      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_RCC_OscConfig+0x7e>
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001638:	e005      	b.n	8001646 <HAL_RCC_OscConfig+0x8a>
 800163a:	4b7c      	ldr	r3, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001646:	4293      	cmp	r3, r2
 8001648:	d223      	bcs.n	8001692 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fd8c 	bl	800216c <RCC_SetFlashLatencyFromMSIRange>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e3ba      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165e:	4b73      	ldr	r3, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a72      	ldr	r2, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	496d      	ldr	r1, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	4968      	ldr	r1, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
 8001690:	e025      	b.n	80016de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4960      	ldr	r1, [pc, #384]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	495b      	ldr	r1, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fd4c 	bl	800216c <RCC_SetFlashLatencyFromMSIRange>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e37a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016de:	f000 fc81 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4950      	ldr	r1, [pc, #320]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x278>)
 80016fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fbf6 	bl	8000ef4 <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d052      	beq.n	80017b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	e35e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d032      	beq.n	8001784 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172a:	f7ff fc33 	bl	8000f94 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001732:	f7ff fc2f 	bl	8000f94 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e347      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a35      	ldr	r2, [pc, #212]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4930      	ldr	r1, [pc, #192]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	492b      	ldr	r1, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
 8001782:	e01a      	b.n	80017ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a28      	ldr	r2, [pc, #160]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001790:	f7ff fc00 	bl	8000f94 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001798:	f7ff fbfc 	bl	8000f94 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e314      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x1dc>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d073      	beq.n	80018ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x21c>
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d10e      	bne.n	80017f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d063      	beq.n	80018ac <HAL_RCC_OscConfig+0x2f0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d15f      	bne.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e2f1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x24c>
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e025      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d114      	bne.n	800183c <HAL_RCC_OscConfig+0x280>
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a02      	ldr	r2, [pc, #8]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e013      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 800182c:	40021000 	.word	0x40021000
 8001830:	08005e60 	.word	0x08005e60
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004
 800183c:	4ba0      	ldr	r3, [pc, #640]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9f      	ldr	r2, [pc, #636]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b9d      	ldr	r3, [pc, #628]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a9c      	ldr	r2, [pc, #624]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fb9a 	bl	8000f94 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fb96 	bl	8000f94 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2ae      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2a8>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fb86 	bl	8000f94 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fb82 	bl	8000f94 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e29a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x2d0>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d060      	beq.n	800197c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x310>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x328>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e277      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	4973      	ldr	r1, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	e040      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fb41 	bl	8000f94 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fb3d 	bl	8000f94 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e255      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	495f      	ldr	r1, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fb1d 	bl	8000f94 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fb19 	bl	8000f94 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e231      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff faf8 	bl	8000f94 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff faf4 	bl	8000f94 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e20c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fadb 	bl	8000f94 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fad7 	bl	8000f94 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1ef      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fa9e 	bl	8000f94 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff fa9a 	bl	8000f94 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1b2      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d8>
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a92:	e029      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d115      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x50c>
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	4b9a      	ldr	r3, [pc, #616]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a99      	ldr	r2, [pc, #612]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	4b96      	ldr	r3, [pc, #600]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a95      	ldr	r2, [pc, #596]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d016      	beq.n	8001b1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fa50 	bl	8000f94 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff fa4c 	bl	8000f94 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e162      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ed      	beq.n	8001af8 <HAL_RCC_OscConfig+0x53c>
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fa39 	bl	8000f94 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff fa35 	bl	8000f94 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e14b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	4b7d      	ldr	r3, [pc, #500]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ed      	bne.n	8001b26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b70:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	4a6f      	ldr	r2, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa08 	bl	8000f94 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b88:	f7ff fa04 	bl	8000f94 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e11c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9a:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ef      	beq.n	8001b88 <HAL_RCC_OscConfig+0x5cc>
 8001ba8:	e01b      	b.n	8001be2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001baa:	4b62      	ldr	r3, [pc, #392]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f9eb 	bl	8000f94 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc2:	f7ff f9e7 	bl	8000f94 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ff      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ef      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80f3 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	f040 80c9 	bne.w	8001d88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bf6:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0203 	and.w	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d12c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	3b01      	subs	r3, #1
 8001c16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d123      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d11b      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d113      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d06b      	beq.n	8001d3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d062      	beq.n	8001d30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c6a:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0ac      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c86:	f7ff f985 	bl	8000f94 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f981 	bl	8000f94 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e099      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCC_OscConfig+0x77c>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc6:	0212      	lsls	r2, r2, #8
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cce:	0852      	lsrs	r2, r2, #1
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0552      	lsls	r2, r2, #21
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cda:	0852      	lsrs	r2, r2, #1
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	0652      	lsls	r2, r2, #25
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce6:	06d2      	lsls	r2, r2, #27
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	4912      	ldr	r1, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d08:	f7ff f944 	bl	8000f94 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f940 	bl	8000f94 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e058      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_RCC_OscConfig+0x778>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2e:	e050      	b.n	8001dd2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e04f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d144      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d60:	f7ff f918 	bl	8000f94 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff f914 	bl	8000f94 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e02c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x7ac>
 8001d86:	e024      	b.n	8001dd2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d01f      	beq.n	8001dce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f8fb 	bl	8000f94 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff f8f7 	bl	8000f94 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	4905      	ldr	r1, [pc, #20]	; (8001ddc <HAL_RCC_OscConfig+0x820>)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x824>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
 8001dcc:	e001      	b.n	8001dd2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	feeefffc 	.word	0xfeeefffc

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0e7      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4970      	ldr	r1, [pc, #448]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0cf      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d908      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4960      	ldr	r1, [pc, #384]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d04c      	beq.n	8001efc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0a6      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e09a      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e9a:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08e      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e086      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4943      	ldr	r1, [pc, #268]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ecc:	f7ff f862 	bl	8000f94 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7ff f85e 	bl	8000f94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e06e      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d010      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d208      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	492b      	ldr	r1, [pc, #172]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d210      	bcs.n	8001f5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 0207 	bic.w	r2, r3, #7
 8001f40:	4923      	ldr	r1, [pc, #140]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e036      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	4918      	ldr	r1, [pc, #96]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f98:	f000 f824 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	091b      	lsrs	r3, r3, #4
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	490b      	ldr	r1, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1fc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ff99 	bl	8000ef4 <HAL_InitTick>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08005e60 	.word	0x08005e60
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x34>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d121      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d11e      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e005      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002054:	e00a      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d102      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	e004      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d101      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800206a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d134      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0xa6>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d003      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xac>
 8002088:	e005      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800208c:	617b      	str	r3, [r7, #20]
      break;
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002092:	617b      	str	r3, [r7, #20]
      break;
 8002094:	e002      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	617b      	str	r3, [r7, #20]
      break;
 800209a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	3301      	adds	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	fb03 f202 	mul.w	r2, r3, r2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	0e5b      	lsrs	r3, r3, #25
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	3301      	adds	r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020dc:	69bb      	ldr	r3, [r7, #24]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08005e78 	.word	0x08005e78
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	007a1200 	.word	0x007a1200

080020fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_RCC_GetHCLKFreq+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002118:	f7ff fff0 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4904      	ldr	r1, [pc, #16]	; (800213c <HAL_RCC_GetPCLK1Freq+0x28>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	08005e70 	.word	0x08005e70

08002140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002144:	f7ff ffda 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0adb      	lsrs	r3, r3, #11
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4904      	ldr	r1, [pc, #16]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	08005e70 	.word	0x08005e70

0800216c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002184:	f7ff f9b6 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002188:	6178      	str	r0, [r7, #20]
 800218a:	e014      	b.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021a4:	f7ff f9a6 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 80021a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021bc:	d10b      	bne.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d919      	bls.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2ba0      	cmp	r3, #160	; 0xa0
 80021c8:	d902      	bls.n	80021d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ca:	2302      	movs	r3, #2
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	e013      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e010      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d902      	bls.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021dc:	2303      	movs	r3, #3
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e00a      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d102      	bne.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e8:	2302      	movs	r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e004      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b70      	cmp	r3, #112	; 0x70
 80021f2:	d101      	bne.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 0207 	bic.w	r2, r3, #7
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002234:	2300      	movs	r3, #0
 8002236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002238:	2300      	movs	r3, #0
 800223a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d031      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002250:	d01a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002256:	d814      	bhi.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800225c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002260:	d10f      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226e:	e00c      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f9de 	bl	8002638 <RCCEx_PLLSAI1_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002280:	e003      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	74fb      	strb	r3, [r7, #19]
      break;
 8002286:	e000      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	494e      	ldr	r1, [pc, #312]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022a6:	e001      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 809e 	beq.w	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fe4a 	bl	8000f94 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002302:	e009      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7fe fe46 	bl	8000f94 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d902      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	74fb      	strb	r3, [r7, #19]
        break;
 8002316:	e005      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ef      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d15a      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01e      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	429a      	cmp	r2, r3
 8002344:	d019      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002352:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002372:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fe06 	bl	8000f94 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00b      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fe02 	bl	8000f94 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d902      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	74fb      	strb	r3, [r7, #19]
            break;
 80023a2:	e006      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ec      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
 80023d4:	e006      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e4:	7c7b      	ldrb	r3, [r7, #17]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b8a      	ldr	r3, [pc, #552]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a89      	ldr	r2, [pc, #548]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002402:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 0203 	bic.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4980      	ldr	r1, [pc, #512]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	f023 020c 	bic.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4978      	ldr	r1, [pc, #480]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002446:	4b73      	ldr	r3, [pc, #460]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	496f      	ldr	r1, [pc, #444]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	4967      	ldr	r1, [pc, #412]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	495e      	ldr	r1, [pc, #376]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	4956      	ldr	r1, [pc, #344]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ce:	4b51      	ldr	r3, [pc, #324]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d028      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f0:	4b48      	ldr	r3, [pc, #288]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4945      	ldr	r1, [pc, #276]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250e:	d106      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a3f      	ldr	r2, [pc, #252]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
 800251c:	e011      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002526:	d10c      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f882 	bl	8002638 <RCCEx_PLLSAI1_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d028      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	492d      	ldr	r1, [pc, #180]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256c:	d106      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002578:	60d3      	str	r3, [r2, #12]
 800257a:	e011      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f853 	bl	8002638 <RCCEx_PLLSAI1_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01c      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f830 	bl	8002638 <RCCEx_PLLSAI1_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4904      	ldr	r1, [pc, #16]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002608:	7cbb      	ldrb	r3, [r7, #18]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002646:	4b74      	ldr	r3, [pc, #464]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d018      	beq.n	8002684 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002652:	4b71      	ldr	r3, [pc, #452]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d10d      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
       ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800266a:	4b6b      	ldr	r3, [pc, #428]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
       ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d047      	beq.n	800270e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e044      	b.n	800270e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d018      	beq.n	80026be <RCCEx_PLLSAI1_Config+0x86>
 800268c:	2b03      	cmp	r3, #3
 800268e:	d825      	bhi.n	80026dc <RCCEx_PLLSAI1_Config+0xa4>
 8002690:	2b01      	cmp	r3, #1
 8002692:	d002      	beq.n	800269a <RCCEx_PLLSAI1_Config+0x62>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d009      	beq.n	80026ac <RCCEx_PLLSAI1_Config+0x74>
 8002698:	e020      	b.n	80026dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800269a:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11d      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026aa:	e01a      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e013      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026be:	4b56      	ldr	r3, [pc, #344]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ca:	4b53      	ldr	r3, [pc, #332]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026da:	e006      	b.n	80026ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e004      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026f2:	4b49      	ldr	r3, [pc, #292]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	430b      	orrs	r3, r1
 8002708:	4943      	ldr	r1, [pc, #268]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d17c      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe fc38 	bl	8000f94 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002728:	f7fe fc34 	bl	8000f94 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
        break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ef      	bne.n	8002728 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d15f      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d110      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800275c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	0211      	lsls	r1, r2, #8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	06d2      	lsls	r2, r2, #27
 800276c:	430a      	orrs	r2, r1
 800276e:	492a      	ldr	r1, [pc, #168]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	610b      	str	r3, [r1, #16]
 8002774:	e027      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d112      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6892      	ldr	r2, [r2, #8]
 800278c:	0211      	lsls	r1, r2, #8
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6912      	ldr	r2, [r2, #16]
 8002792:	0852      	lsrs	r2, r2, #1
 8002794:	3a01      	subs	r2, #1
 8002796:	0552      	lsls	r2, r2, #21
 8002798:	430a      	orrs	r2, r1
 800279a:	491f      	ldr	r1, [pc, #124]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	610b      	str	r3, [r1, #16]
 80027a0:	e011      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6892      	ldr	r2, [r2, #8]
 80027b2:	0211      	lsls	r1, r2, #8
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6952      	ldr	r2, [r2, #20]
 80027b8:	0852      	lsrs	r2, r2, #1
 80027ba:	3a01      	subs	r2, #1
 80027bc:	0652      	lsls	r2, r2, #25
 80027be:	430a      	orrs	r2, r1
 80027c0:	4915      	ldr	r1, [pc, #84]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fbdf 	bl	8000f94 <HAL_GetTick>
 80027d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d8:	e009      	b.n	80027ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027da:	f7fe fbdb 	bl	8000f94 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d902      	bls.n	80027ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	73fb      	strb	r3, [r7, #15]
          break;
 80027ec:	e005      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e049      	b.n	80028c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f946 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f001 f82c 	bl	80038b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e049      	b.n	8002970 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f841 	bl	8002978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	4619      	mov	r1, r3
 8002908:	4610      	mov	r0, r2
 800290a:	f000 ffd5 	bl	80038b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e03c      	b.n	8002a2a <HAL_TIM_PWM_Start+0x9e>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d109      	bne.n	80029ca <HAL_TIM_PWM_Start+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e02f      	b.n	8002a2a <HAL_TIM_PWM_Start+0x9e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d109      	bne.n	80029e4 <HAL_TIM_PWM_Start+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e022      	b.n	8002a2a <HAL_TIM_PWM_Start+0x9e>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d109      	bne.n	80029fe <HAL_TIM_PWM_Start+0x72>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e015      	b.n	8002a2a <HAL_TIM_PWM_Start+0x9e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d109      	bne.n	8002a18 <HAL_TIM_PWM_Start+0x8c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e008      	b.n	8002a2a <HAL_TIM_PWM_Start+0x9e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07e      	b.n	8002b30 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <HAL_TIM_PWM_Start+0xb6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a40:	e023      	b.n	8002a8a <HAL_TIM_PWM_Start+0xfe>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d104      	bne.n	8002a52 <HAL_TIM_PWM_Start+0xc6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a50:	e01b      	b.n	8002a8a <HAL_TIM_PWM_Start+0xfe>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_PWM_Start+0xd6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a60:	e013      	b.n	8002a8a <HAL_TIM_PWM_Start+0xfe>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_PWM_Start+0xe6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a70:	e00b      	b.n	8002a8a <HAL_TIM_PWM_Start+0xfe>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_PWM_Start+0xf6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a80:	e003      	b.n	8002a8a <HAL_TIM_PWM_Start+0xfe>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fc2c 	bl	80042f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a26      	ldr	r2, [pc, #152]	; (8002b38 <HAL_TIM_PWM_Start+0x1ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x12a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <HAL_TIM_PWM_Start+0x1b0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x12a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_TIM_PWM_Start+0x1b4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PWM_Start+0x12e>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_TIM_PWM_Start+0x130>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_PWM_Start+0x1ac>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_TIM_PWM_Start+0x162>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d004      	beq.n	8002aee <HAL_TIM_PWM_Start+0x162>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_TIM_PWM_Start+0x1b0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d115      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_TIM_PWM_Start+0x1b8>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d015      	beq.n	8002b2c <HAL_TIM_PWM_Start+0x1a0>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d011      	beq.n	8002b2c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	e008      	b.n	8002b2c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e000      	b.n	8002b2e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	00010007 	.word	0x00010007

08002b48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e049      	b.n	8002bee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f841 	bl	8002bf6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fe96 	bl	80038b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_IC_Start+0x1a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e023      	b.n	8002c6e <HAL_TIM_IC_Start+0x62>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_IC_Start+0x2a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e01b      	b.n	8002c6e <HAL_TIM_IC_Start+0x62>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d104      	bne.n	8002c46 <HAL_TIM_IC_Start+0x3a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e013      	b.n	8002c6e <HAL_TIM_IC_Start+0x62>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_IC_Start+0x4a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e00b      	b.n	8002c6e <HAL_TIM_IC_Start+0x62>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b10      	cmp	r3, #16
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_IC_Start+0x5a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e003      	b.n	8002c6e <HAL_TIM_IC_Start+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_TIM_IC_Start+0x74>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e013      	b.n	8002ca8 <HAL_TIM_IC_Start+0x9c>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d104      	bne.n	8002c90 <HAL_TIM_IC_Start+0x84>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e00b      	b.n	8002ca8 <HAL_TIM_IC_Start+0x9c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d104      	bne.n	8002ca0 <HAL_TIM_IC_Start+0x94>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e003      	b.n	8002ca8 <HAL_TIM_IC_Start+0x9c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e07e      	b.n	8002db8 <HAL_TIM_IC_Start+0x1ac>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <HAL_TIM_IC_Start+0xbe>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	e023      	b.n	8002d12 <HAL_TIM_IC_Start+0x106>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_IC_Start+0xce>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	e01b      	b.n	8002d12 <HAL_TIM_IC_Start+0x106>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_IC_Start+0xde>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_IC_Start+0x106>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start+0xee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_IC_Start+0x106>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_IC_Start+0xfe>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	e003      	b.n	8002d12 <HAL_TIM_IC_Start+0x106>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_IC_Start+0x116>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d20:	e013      	b.n	8002d4a <HAL_TIM_IC_Start+0x13e>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_IC_Start+0x126>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d30:	e00b      	b.n	8002d4a <HAL_TIM_IC_Start+0x13e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_IC_Start+0x136>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d40:	e003      	b.n	8002d4a <HAL_TIM_IC_Start+0x13e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 facc 	bl	80042f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_TIM_IC_Start+0x1b4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_TIM_IC_Start+0x16a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d004      	beq.n	8002d76 <HAL_TIM_IC_Start+0x16a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_TIM_IC_Start+0x1b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d115      	bne.n	8002da2 <HAL_TIM_IC_Start+0x196>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_TIM_IC_Start+0x1bc>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b06      	cmp	r3, #6
 8002d86:	d015      	beq.n	8002db4 <HAL_TIM_IC_Start+0x1a8>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8e:	d011      	beq.n	8002db4 <HAL_TIM_IC_Start+0x1a8>
    {
      __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da0:	e008      	b.n	8002db4 <HAL_TIM_IC_Start+0x1a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_IC_Start+0x1aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	00010007 	.word	0x00010007

08002dcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_IC_Start_IT+0x1e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	e023      	b.n	8002e32 <HAL_TIM_IC_Start_IT+0x66>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_IC_Start_IT+0x2e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	e01b      	b.n	8002e32 <HAL_TIM_IC_Start_IT+0x66>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_IC_Start_IT+0x3e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e013      	b.n	8002e32 <HAL_TIM_IC_Start_IT+0x66>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_IC_Start_IT+0x4e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e00b      	b.n	8002e32 <HAL_TIM_IC_Start_IT+0x66>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_IC_Start_IT+0x5e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	e003      	b.n	8002e32 <HAL_TIM_IC_Start_IT+0x66>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <HAL_TIM_IC_Start_IT+0x78>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e013      	b.n	8002e6c <HAL_TIM_IC_Start_IT+0xa0>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d104      	bne.n	8002e54 <HAL_TIM_IC_Start_IT+0x88>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e00b      	b.n	8002e6c <HAL_TIM_IC_Start_IT+0xa0>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d104      	bne.n	8002e64 <HAL_TIM_IC_Start_IT+0x98>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e003      	b.n	8002e6c <HAL_TIM_IC_Start_IT+0xa0>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e6e:	7bbb      	ldrb	r3, [r7, #14]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e74:	7b7b      	ldrb	r3, [r7, #13]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0c9      	b.n	8003012 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_IC_Start_IT+0xc2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	e023      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x10a>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_IC_Start_IT+0xd2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	e01b      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x10a>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_IC_Start_IT+0xe2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eac:	e013      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x10a>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_IC_Start_IT+0xf2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x10a>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_IC_Start_IT+0x102>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	e003      	b.n	8002ed6 <HAL_TIM_IC_Start_IT+0x10a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_IC_Start_IT+0x11a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee4:	e013      	b.n	8002f0e <HAL_TIM_IC_Start_IT+0x142>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_IC_Start_IT+0x12a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef4:	e00b      	b.n	8002f0e <HAL_TIM_IC_Start_IT+0x142>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d104      	bne.n	8002f06 <HAL_TIM_IC_Start_IT+0x13a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f04:	e003      	b.n	8002f0e <HAL_TIM_IC_Start_IT+0x142>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d841      	bhi.n	8002f98 <HAL_TIM_IC_Start_IT+0x1cc>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_TIM_IC_Start_IT+0x150>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f99 	.word	0x08002f99
 8002f24:	08002f99 	.word	0x08002f99
 8002f28:	08002f99 	.word	0x08002f99
 8002f2c:	08002f63 	.word	0x08002f63
 8002f30:	08002f99 	.word	0x08002f99
 8002f34:	08002f99 	.word	0x08002f99
 8002f38:	08002f99 	.word	0x08002f99
 8002f3c:	08002f75 	.word	0x08002f75
 8002f40:	08002f99 	.word	0x08002f99
 8002f44:	08002f99 	.word	0x08002f99
 8002f48:	08002f99 	.word	0x08002f99
 8002f4c:	08002f87 	.word	0x08002f87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0202 	orr.w	r2, r2, #2
 8002f5e:	60da      	str	r2, [r3, #12]
      break;
 8002f60:	e01d      	b.n	8002f9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0204 	orr.w	r2, r2, #4
 8002f70:	60da      	str	r2, [r3, #12]
      break;
 8002f72:	e014      	b.n	8002f9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	60da      	str	r2, [r3, #12]
      break;
 8002f84:	e00b      	b.n	8002f9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0210 	orr.w	r2, r2, #16
 8002f94:	60da      	str	r2, [r3, #12]
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d135      	bne.n	8003010 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 f99f 	bl	80042f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_TIM_IC_Start_IT+0x250>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIM_IC_Start_IT+0x204>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_IC_Start_IT+0x204>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a15      	ldr	r2, [pc, #84]	; (8003020 <HAL_TIM_IC_Start_IT+0x254>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d115      	bne.n	8002ffc <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_TIM_IC_Start_IT+0x258>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d015      	beq.n	800300e <HAL_TIM_IC_Start_IT+0x242>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe8:	d011      	beq.n	800300e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	e008      	b.n	800300e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e000      	b.n	8003010 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40014000 	.word	0x40014000
 8003024:	00010007 	.word	0x00010007

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0202 	mvn.w	r2, #2
 8003054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fa82 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fc02 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fc09 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0204 	mvn.w	r2, #4
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fa58 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fbd8 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fbdf 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0208 	mvn.w	r2, #8
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fa2e 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fbae 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fbb5 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b10      	cmp	r3, #16
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0210 	mvn.w	r2, #16
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2208      	movs	r2, #8
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fa04 	bl	8000574 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fb84 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fb8b 	bl	8003890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0201 	mvn.w	r2, #1
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fb5e 	bl	8003868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b80      	cmp	r3, #128	; 0x80
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f001 f99a 	bl	800450c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e6:	d10e      	bne.n	8003206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f001 f98d 	bl	8004520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d10e      	bne.n	8003232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d107      	bne.n	8003232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb39 	bl	80038a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b20      	cmp	r3, #32
 800323e:	d10e      	bne.n	800325e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b20      	cmp	r3, #32
 800324c:	d107      	bne.n	800325e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f06f 0220 	mvn.w	r2, #32
 8003256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f001 f94d 	bl	80044f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003280:	2302      	movs	r3, #2
 8003282:	e088      	b.n	8003396 <HAL_TIM_IC_ConfigChannel+0x130>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6819      	ldr	r1, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 fe7f 	bl	8003fa4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 020c 	bic.w	r2, r2, #12
 80032b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6999      	ldr	r1, [r3, #24]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e060      	b.n	800338c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11c      	bne.n	800330a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f000 fee5 	bl	80040ae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6999      	ldr	r1, [r3, #24]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	619a      	str	r2, [r3, #24]
 8003308:	e040      	b.n	800338c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f000 ff32 	bl	8004188 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 020c 	bic.w	r2, r2, #12
 8003332:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69d9      	ldr	r1, [r3, #28]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	e021      	b.n	800338c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d11c      	bne.n	8003388 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f000 ff4f 	bl	8004200 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003370:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69d9      	ldr	r1, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	021a      	lsls	r2, r3, #8
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	61da      	str	r2, [r3, #28]
 8003386:	e001      	b.n	800338c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0ff      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b14      	cmp	r3, #20
 80033ca:	f200 80f0 	bhi.w	80035ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	08003429 	.word	0x08003429
 80033d8:	080035af 	.word	0x080035af
 80033dc:	080035af 	.word	0x080035af
 80033e0:	080035af 	.word	0x080035af
 80033e4:	08003469 	.word	0x08003469
 80033e8:	080035af 	.word	0x080035af
 80033ec:	080035af 	.word	0x080035af
 80033f0:	080035af 	.word	0x080035af
 80033f4:	080034ab 	.word	0x080034ab
 80033f8:	080035af 	.word	0x080035af
 80033fc:	080035af 	.word	0x080035af
 8003400:	080035af 	.word	0x080035af
 8003404:	080034eb 	.word	0x080034eb
 8003408:	080035af 	.word	0x080035af
 800340c:	080035af 	.word	0x080035af
 8003410:	080035af 	.word	0x080035af
 8003414:	0800352d 	.word	0x0800352d
 8003418:	080035af 	.word	0x080035af
 800341c:	080035af 	.word	0x080035af
 8003420:	080035af 	.word	0x080035af
 8003424:	0800356d 	.word	0x0800356d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 faa6 	bl	8003980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]
      break;
 8003466:	e0a5      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fb02 	bl	8003a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
      break;
 80034a8:	e084      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fb5b 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0208 	orr.w	r2, r2, #8
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
      break;
 80034e8:	e064      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fbb3 	bl	8003c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	61da      	str	r2, [r3, #28]
      break;
 800352a:	e043      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fbf0 	bl	8003d18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800356a:	e023      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fc28 	bl	8003dc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035ac:	e002      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
      break;
 80035b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop

080035c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_ConfigClockSource+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0b6      	b.n	8003752 <HAL_TIM_ConfigClockSource+0x18a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003620:	d03e      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0xd8>
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	f200 8087 	bhi.w	8003738 <HAL_TIM_ConfigClockSource+0x170>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	f000 8086 	beq.w	800373e <HAL_TIM_ConfigClockSource+0x176>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d87f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003638:	2b70      	cmp	r3, #112	; 0x70
 800363a:	d01a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0xaa>
 800363c:	2b70      	cmp	r3, #112	; 0x70
 800363e:	d87b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003640:	2b60      	cmp	r3, #96	; 0x60
 8003642:	d050      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x11e>
 8003644:	2b60      	cmp	r3, #96	; 0x60
 8003646:	d877      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003648:	2b50      	cmp	r3, #80	; 0x50
 800364a:	d03c      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0xfe>
 800364c:	2b50      	cmp	r3, #80	; 0x50
 800364e:	d873      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d058      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x13e>
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d86f      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003658:	2b30      	cmp	r3, #48	; 0x30
 800365a:	d064      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 800365c:	2b30      	cmp	r3, #48	; 0x30
 800365e:	d86b      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d060      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d867      	bhi.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05c      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d05a      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x15e>
 8003670:	e062      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f000 fe15 	bl	80042b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	609a      	str	r2, [r3, #8]
      break;
 800369e:	e04f      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f000 fdfe 	bl	80042b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c2:	609a      	str	r2, [r3, #8]
      break;
 80036c4:	e03c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 fcbc 	bl	8004050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2150      	movs	r1, #80	; 0x50
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fdcb 	bl	800427a <TIM_ITRx_SetConfig>
      break;
 80036e4:	e02c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fd18 	bl	8004128 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2160      	movs	r1, #96	; 0x60
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fdbb 	bl	800427a <TIM_ITRx_SetConfig>
      break;
 8003704:	e01c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fc9c 	bl	8004050 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fdab 	bl	800427a <TIM_ITRx_SetConfig>
      break;
 8003724:	e00c      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f000 fda2 	bl	800427a <TIM_ITRx_SetConfig>
      break;
 8003736:	e003      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e000      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800373e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_TIM_SlaveConfigSynchro+0x18>
 800376e:	2302      	movs	r3, #2
 8003770:	e031      	b.n	80037d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003782:	6839      	ldr	r1, [r7, #0]
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb79 	bl	8003e7c <TIM_SlaveTimer_SetConfig>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e018      	b.n	80037d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037c2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d831      	bhi.n	8003858 <HAL_TIM_ReadCapturedValue+0x78>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003859 	.word	0x08003859
 8003804:	08003859 	.word	0x08003859
 8003808:	08003859 	.word	0x08003859
 800380c:	0800383b 	.word	0x0800383b
 8003810:	08003859 	.word	0x08003859
 8003814:	08003859 	.word	0x08003859
 8003818:	08003859 	.word	0x08003859
 800381c:	08003845 	.word	0x08003845
 8003820:	08003859 	.word	0x08003859
 8003824:	08003859 	.word	0x08003859
 8003828:	08003859 	.word	0x08003859
 800382c:	0800384f 	.word	0x0800384f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	60fb      	str	r3, [r7, #12]

      break;
 8003838:	e00f      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	60fb      	str	r3, [r7, #12]

      break;
 8003842:	e00a      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	60fb      	str	r3, [r7, #12]

      break;
 800384c:	e005      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	60fb      	str	r3, [r7, #12]

      break;
 8003856:	e000      	b.n	800385a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003858:	bf00      	nop
  }

  return tmpreg;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <TIM_Base_SetConfig+0xbc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0x20>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d6:	d108      	bne.n	80038ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <TIM_Base_SetConfig+0xbc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_Base_SetConfig+0x52>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d007      	beq.n	800390a <TIM_Base_SetConfig+0x52>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <TIM_Base_SetConfig+0xc0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_Base_SetConfig+0x52>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <TIM_Base_SetConfig+0xc4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d108      	bne.n	800391c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <TIM_Base_SetConfig+0xbc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0xa0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <TIM_Base_SetConfig+0xc0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xa0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <TIM_Base_SetConfig+0xc4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400

08003980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 0302 	bic.w	r3, r3, #2
 80039cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_OC1_SetConfig+0xec>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d007      	beq.n	80039f0 <TIM_OC1_SetConfig+0x70>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_OC1_SetConfig+0xf0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d003      	beq.n	80039f0 <TIM_OC1_SetConfig+0x70>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <TIM_OC1_SetConfig+0xf4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10c      	bne.n	8003a0a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f023 0308 	bic.w	r3, r3, #8
 80039f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <TIM_OC1_SetConfig+0xec>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_OC1_SetConfig+0xa2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <TIM_OC1_SetConfig+0xf0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_OC1_SetConfig+0xa2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <TIM_OC1_SetConfig+0xf4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d111      	bne.n	8003a46 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400

08003a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0210 	bic.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0320 	bic.w	r3, r3, #32
 8003ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <TIM_OC2_SetConfig+0xe8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d10d      	bne.n	8003af8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <TIM_OC2_SetConfig+0xe8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_OC2_SetConfig+0x98>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <TIM_OC2_SetConfig+0xec>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC2_SetConfig+0x98>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <TIM_OC2_SetConfig+0xf0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d113      	bne.n	8003b38 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10d      	bne.n	8003bea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_OC3_SetConfig+0x96>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <TIM_OC3_SetConfig+0xe8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0x96>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <TIM_OC3_SetConfig+0xec>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400

08003c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <TIM_OC4_SetConfig+0xb0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_OC4_SetConfig+0x74>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <TIM_OC4_SetConfig+0xb4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_OC4_SetConfig+0x74>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <TIM_OC4_SetConfig+0xb8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d109      	bne.n	8003ce4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	019b      	lsls	r3, r3, #6
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400

08003d18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <TIM_OC5_SetConfig+0xa4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <TIM_OC5_SetConfig+0x6a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <TIM_OC5_SetConfig+0xa8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_OC5_SetConfig+0x6a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <TIM_OC5_SetConfig+0xac>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d109      	bne.n	8003d96 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400

08003dc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	051b      	lsls	r3, r3, #20
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <TIM_OC6_SetConfig+0xa8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_OC6_SetConfig+0x6c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <TIM_OC6_SetConfig+0xac>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_OC6_SetConfig+0x6c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <TIM_OC6_SetConfig+0xb0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d109      	bne.n	8003e48 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400

08003e7c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e98:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b70      	cmp	r3, #112	; 0x70
 8003ec8:	d01a      	beq.n	8003f00 <TIM_SlaveTimer_SetConfig+0x84>
 8003eca:	2b70      	cmp	r3, #112	; 0x70
 8003ecc:	d860      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
 8003ece:	2b60      	cmp	r3, #96	; 0x60
 8003ed0:	d054      	beq.n	8003f7c <TIM_SlaveTimer_SetConfig+0x100>
 8003ed2:	2b60      	cmp	r3, #96	; 0x60
 8003ed4:	d85c      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
 8003ed6:	2b50      	cmp	r3, #80	; 0x50
 8003ed8:	d046      	beq.n	8003f68 <TIM_SlaveTimer_SetConfig+0xec>
 8003eda:	2b50      	cmp	r3, #80	; 0x50
 8003edc:	d858      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d019      	beq.n	8003f16 <TIM_SlaveTimer_SetConfig+0x9a>
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d854      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
 8003ee6:	2b30      	cmp	r3, #48	; 0x30
 8003ee8:	d055      	beq.n	8003f96 <TIM_SlaveTimer_SetConfig+0x11a>
 8003eea:	2b30      	cmp	r3, #48	; 0x30
 8003eec:	d850      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d051      	beq.n	8003f96 <TIM_SlaveTimer_SetConfig+0x11a>
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d84c      	bhi.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d04d      	beq.n	8003f96 <TIM_SlaveTimer_SetConfig+0x11a>
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d04b      	beq.n	8003f96 <TIM_SlaveTimer_SetConfig+0x11a>
 8003efe:	e047      	b.n	8003f90 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f000 f9ce 	bl	80042b0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003f14:	e040      	b.n	8003f98 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d101      	bne.n	8003f22 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e03b      	b.n	8003f9a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f48:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
      break;
 8003f66:	e017      	b.n	8003f98 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6899      	ldr	r1, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	461a      	mov	r2, r3
 8003f76:	f000 f86b 	bl	8004050 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003f7a:	e00d      	b.n	8003f98 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f000 f8cd 	bl	8004128 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003f8e:	e003      	b.n	8003f98 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
      break;
 8003f94:	e000      	b.n	8003f98 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003f96:	bf00      	nop
  }

  return status;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	f023 0201 	bic.w	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <TIM_TI1_SetConfig+0xa4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x3e>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd8:	d003      	beq.n	8003fe2 <TIM_TI1_SetConfig+0x3e>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <TIM_TI1_SetConfig+0xa8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <TIM_TI1_SetConfig+0x42>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <TIM_TI1_SetConfig+0x44>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e003      	b.n	8004006 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f023 030a 	bic.w	r3, r3, #10
 8004020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f003 030a 	and.w	r3, r3, #10
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40014000 	.word	0x40014000

08004050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 030a 	bic.w	r3, r3, #10
 800408c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b087      	sub	sp, #28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f023 0210 	bic.w	r2, r3, #16
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	031b      	lsls	r3, r3, #12
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004100:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f023 0210 	bic.w	r2, r3, #16
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	031b      	lsls	r3, r3, #12
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	621a      	str	r2, [r3, #32]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 0303 	bic.w	r3, r3, #3
 80041b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800423e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	031b      	lsls	r3, r3, #12
 8004244:	b29b      	uxth	r3, r3
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	031b      	lsls	r3, r3, #12
 8004258:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	f043 0307 	orr.w	r3, r3, #7
 800429c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	609a      	str	r2, [r3, #8]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	2201      	movs	r2, #1
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1a      	ldr	r2, [r3, #32]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e04f      	b.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a21      	ldr	r2, [pc, #132]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a14      	ldr	r2, [pc, #80]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d004      	beq.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10c      	bne.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40014000 	.word	0x40014000

08004408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e060      	b.n	80044e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d115      	bne.n	80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	051b      	lsls	r3, r3, #20
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00

080044f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e040      	b.n	80045c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fb52 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8c0 	bl	80046f8 <UART_SetConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e022      	b.n	80045c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fae0 	bl	8004b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800459e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fb67 	bl	8004c94 <UART_CheckIdleState>
 80045c6:	4603      	mov	r3, r0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	f040 8082 	bne.w	80046ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_UART_Transmit+0x26>
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07a      	b.n	80046f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_UART_Transmit+0x38>
 8004604:	2302      	movs	r3, #2
 8004606:	e073      	b.n	80046f0 <HAL_UART_Transmit+0x120>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2221      	movs	r2, #33	; 0x21
 800461c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461e:	f7fc fcb9 	bl	8000f94 <HAL_GetTick>
 8004622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463c:	d108      	bne.n	8004650 <HAL_UART_Transmit+0x80>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e003      	b.n	8004658 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004660:	e02d      	b.n	80046be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fb5a 	bl	8004d26 <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e039      	b.n	80046f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	881a      	ldrh	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800468e:	b292      	uxth	r2, r2
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	3302      	adds	r3, #2
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	e008      	b.n	80046ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b292      	uxth	r2, r2
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3301      	adds	r3, #1
 80046aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1cb      	bne.n	8004662 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2140      	movs	r1, #64	; 0x40
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fb26 	bl	8004d26 <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e005      	b.n	80046f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b08a      	sub	sp, #40	; 0x28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4313      	orrs	r3, r2
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4bb4      	ldr	r3, [pc, #720]	; (80049f8 <UART_SetConfig+0x300>)
 8004728:	4013      	ands	r3, r2
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004730:	430b      	orrs	r3, r1
 8004732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4aa9      	ldr	r2, [pc, #676]	; (80049fc <UART_SetConfig+0x304>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	4313      	orrs	r3, r2
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4aa0      	ldr	r2, [pc, #640]	; (8004a00 <UART_SetConfig+0x308>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d126      	bne.n	80047d0 <UART_SetConfig+0xd8>
 8004782:	4ba0      	ldr	r3, [pc, #640]	; (8004a04 <UART_SetConfig+0x30c>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b03      	cmp	r3, #3
 800478e:	d81b      	bhi.n	80047c8 <UART_SetConfig+0xd0>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0xa0>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047a9 	.word	0x080047a9
 800479c:	080047b9 	.word	0x080047b9
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e080      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e07c      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e078      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e074      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e070      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a8c      	ldr	r2, [pc, #560]	; (8004a08 <UART_SetConfig+0x310>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d138      	bne.n	800484c <UART_SetConfig+0x154>
 80047da:	4b8a      	ldr	r3, [pc, #552]	; (8004a04 <UART_SetConfig+0x30c>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	d82d      	bhi.n	8004844 <UART_SetConfig+0x14c>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <UART_SetConfig+0xf8>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004825 	.word	0x08004825
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004845 	.word	0x08004845
 80047fc:	08004845 	.word	0x08004845
 8004800:	08004835 	.word	0x08004835
 8004804:	08004845 	.word	0x08004845
 8004808:	08004845 	.word	0x08004845
 800480c:	08004845 	.word	0x08004845
 8004810:	0800482d 	.word	0x0800482d
 8004814:	08004845 	.word	0x08004845
 8004818:	08004845 	.word	0x08004845
 800481c:	08004845 	.word	0x08004845
 8004820:	0800483d 	.word	0x0800483d
 8004824:	2300      	movs	r3, #0
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482a:	e042      	b.n	80048b2 <UART_SetConfig+0x1ba>
 800482c:	2302      	movs	r3, #2
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e03e      	b.n	80048b2 <UART_SetConfig+0x1ba>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e03a      	b.n	80048b2 <UART_SetConfig+0x1ba>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e036      	b.n	80048b2 <UART_SetConfig+0x1ba>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e032      	b.n	80048b2 <UART_SetConfig+0x1ba>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6a      	ldr	r2, [pc, #424]	; (80049fc <UART_SetConfig+0x304>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d12a      	bne.n	80048ac <UART_SetConfig+0x1b4>
 8004856:	4b6b      	ldr	r3, [pc, #428]	; (8004a04 <UART_SetConfig+0x30c>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004864:	d01a      	beq.n	800489c <UART_SetConfig+0x1a4>
 8004866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800486a:	d81b      	bhi.n	80048a4 <UART_SetConfig+0x1ac>
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004870:	d00c      	beq.n	800488c <UART_SetConfig+0x194>
 8004872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004876:	d815      	bhi.n	80048a4 <UART_SetConfig+0x1ac>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <UART_SetConfig+0x18c>
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d008      	beq.n	8004894 <UART_SetConfig+0x19c>
 8004882:	e00f      	b.n	80048a4 <UART_SetConfig+0x1ac>
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e012      	b.n	80048b2 <UART_SetConfig+0x1ba>
 800488c:	2302      	movs	r3, #2
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e00e      	b.n	80048b2 <UART_SetConfig+0x1ba>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e00a      	b.n	80048b2 <UART_SetConfig+0x1ba>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e006      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e002      	b.n	80048b2 <UART_SetConfig+0x1ba>
 80048ac:	2310      	movs	r3, #16
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a51      	ldr	r2, [pc, #324]	; (80049fc <UART_SetConfig+0x304>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d17a      	bne.n	80049b2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d824      	bhi.n	800490e <UART_SetConfig+0x216>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x1d4>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	0800490f 	.word	0x0800490f
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	0800490f 	.word	0x0800490f
 80048dc:	080048ff 	.word	0x080048ff
 80048e0:	0800490f 	.word	0x0800490f
 80048e4:	0800490f 	.word	0x0800490f
 80048e8:	0800490f 	.word	0x0800490f
 80048ec:	08004907 	.word	0x08004907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fd fc10 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 80048f4:	61f8      	str	r0, [r7, #28]
        break;
 80048f6:	e010      	b.n	800491a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b44      	ldr	r3, [pc, #272]	; (8004a0c <UART_SetConfig+0x314>)
 80048fa:	61fb      	str	r3, [r7, #28]
        break;
 80048fc:	e00d      	b.n	800491a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fe:	f7fd fb71 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8004902:	61f8      	str	r0, [r7, #28]
        break;
 8004904:	e009      	b.n	800491a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490a:	61fb      	str	r3, [r7, #28]
        break;
 800490c:	e005      	b.n	800491a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8107 	beq.w	8004b30 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4413      	add	r3, r2
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	429a      	cmp	r2, r3
 8004930:	d305      	bcc.n	800493e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	429a      	cmp	r2, r3
 800493c:	d903      	bls.n	8004946 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004944:	e0f4      	b.n	8004b30 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2200      	movs	r2, #0
 800494a:	461c      	mov	r4, r3
 800494c:	4615      	mov	r5, r2
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	022b      	lsls	r3, r5, #8
 8004958:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800495c:	0222      	lsls	r2, r4, #8
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	6849      	ldr	r1, [r1, #4]
 8004962:	0849      	lsrs	r1, r1, #1
 8004964:	2000      	movs	r0, #0
 8004966:	4688      	mov	r8, r1
 8004968:	4681      	mov	r9, r0
 800496a:	eb12 0a08 	adds.w	sl, r2, r8
 800496e:	eb43 0b09 	adc.w	fp, r3, r9
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004980:	4650      	mov	r0, sl
 8004982:	4659      	mov	r1, fp
 8004984:	f7fb fc74 	bl	8000270 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4613      	mov	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004996:	d308      	bcc.n	80049aa <UART_SetConfig+0x2b2>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499e:	d204      	bcs.n	80049aa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	e0c2      	b.n	8004b30 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049b0:	e0be      	b.n	8004b30 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ba:	d16a      	bne.n	8004a92 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80049bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d834      	bhi.n	8004a2e <UART_SetConfig+0x336>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x2d4>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a19 	.word	0x08004a19
 80049d8:	08004a2f 	.word	0x08004a2f
 80049dc:	08004a1f 	.word	0x08004a1f
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004a2f 	.word	0x08004a2f
 80049e8:	08004a2f 	.word	0x08004a2f
 80049ec:	08004a27 	.word	0x08004a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fd fb90 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 80049f4:	61f8      	str	r0, [r7, #28]
        break;
 80049f6:	e020      	b.n	8004a3a <UART_SetConfig+0x342>
 80049f8:	efff69f3 	.word	0xefff69f3
 80049fc:	40008000 	.word	0x40008000
 8004a00:	40013800 	.word	0x40013800
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40004400 	.word	0x40004400
 8004a0c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a10:	f7fd fb96 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8004a14:	61f8      	str	r0, [r7, #28]
        break;
 8004a16:	e010      	b.n	8004a3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a18:	4b4c      	ldr	r3, [pc, #304]	; (8004b4c <UART_SetConfig+0x454>)
 8004a1a:	61fb      	str	r3, [r7, #28]
        break;
 8004a1c:	e00d      	b.n	8004a3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a1e:	f7fd fae1 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8004a22:	61f8      	str	r0, [r7, #28]
        break;
 8004a24:	e009      	b.n	8004a3a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2a:	61fb      	str	r3, [r7, #28]
        break;
 8004a2c:	e005      	b.n	8004a3a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d077      	beq.n	8004b30 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	005a      	lsls	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	441a      	add	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b0f      	cmp	r3, #15
 8004a5a:	d916      	bls.n	8004a8a <UART_SetConfig+0x392>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a62:	d212      	bcs.n	8004a8a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f023 030f 	bic.w	r3, r3, #15
 8004a6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	8afa      	ldrh	r2, [r7, #22]
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	e052      	b.n	8004b30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a90:	e04e      	b.n	8004b30 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d827      	bhi.n	8004aea <UART_SetConfig+0x3f2>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x3a8>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004adb 	.word	0x08004adb
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7fd fb26 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	61f8      	str	r0, [r7, #28]
        break;
 8004aca:	e014      	b.n	8004af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7fd fb38 	bl	8002140 <HAL_RCC_GetPCLK2Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e010      	b.n	8004af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <UART_SetConfig+0x454>)
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e00d      	b.n	8004af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fd fa83 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8004ade:	61f8      	str	r0, [r7, #28]
        break;
 8004ae0:	e009      	b.n	8004af6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e005      	b.n	8004af6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004af4:	bf00      	nop
    }

    if (pclk != 0U)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d019      	beq.n	8004b30 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	085a      	lsrs	r2, r3, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	441a      	add	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b0f      	cmp	r3, #15
 8004b14:	d909      	bls.n	8004b2a <UART_SetConfig+0x432>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1c:	d205      	bcs.n	8004b2a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e002      	b.n	8004b30 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3728      	adds	r7, #40	; 0x28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop
 8004b4c:	00f42400 	.word	0x00f42400

08004b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4e:	d10a      	bne.n	8004c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ca4:	f7fc f976 	bl	8000f94 <HAL_GetTick>
 8004ca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d10e      	bne.n	8004cd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f82d 	bl	8004d26 <UART_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e023      	b.n	8004d1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d10e      	bne.n	8004d02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f817 	bl	8004d26 <UART_WaitOnFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00d      	b.n	8004d1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b09c      	sub	sp, #112	; 0x70
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d36:	e0a5      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d3e:	f000 80a1 	beq.w	8004e84 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fc f927 	bl	8000f94 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d13e      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e6      	bne.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	663b      	str	r3, [r7, #96]	; 0x60
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004daa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e5      	bne.n	8004d8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e067      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d04f      	beq.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df2:	d147      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dfc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e6      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e50:	623a      	str	r2, [r7, #32]
 8004e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	69f9      	ldr	r1, [r7, #28]
 8004e56:	6a3a      	ldr	r2, [r7, #32]
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e5      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e010      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f43f af4a 	beq.w	8004d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3770      	adds	r7, #112	; 0x70
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <__errno>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <__errno+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	2000000c 	.word	0x2000000c

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4d0d      	ldr	r5, [pc, #52]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4d0b      	ldr	r5, [pc, #44]	; (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	; (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f000 ffae 	bl	8005e30 <_init>
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2600      	movs	r6, #0
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08005f48 	.word	0x08005f48
 8004ef8:	08005f48 	.word	0x08005f48
 8004efc:	08005f48 	.word	0x08005f48
 8004f00:	08005f4c 	.word	0x08005f4c

08004f04 <memset>:
 8004f04:	4402      	add	r2, r0
 8004f06:	4603      	mov	r3, r0
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d100      	bne.n	8004f0e <memset+0xa>
 8004f0c:	4770      	bx	lr
 8004f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f12:	e7f9      	b.n	8004f08 <memset+0x4>

08004f14 <iprintf>:
 8004f14:	b40f      	push	{r0, r1, r2, r3}
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <iprintf+0x2c>)
 8004f18:	b513      	push	{r0, r1, r4, lr}
 8004f1a:	681c      	ldr	r4, [r3, #0]
 8004f1c:	b124      	cbz	r4, 8004f28 <iprintf+0x14>
 8004f1e:	69a3      	ldr	r3, [r4, #24]
 8004f20:	b913      	cbnz	r3, 8004f28 <iprintf+0x14>
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f866 	bl	8004ff4 <__sinit>
 8004f28:	ab05      	add	r3, sp, #20
 8004f2a:	9a04      	ldr	r2, [sp, #16]
 8004f2c:	68a1      	ldr	r1, [r4, #8]
 8004f2e:	9301      	str	r3, [sp, #4]
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 f9bd 	bl	80052b0 <_vfiprintf_r>
 8004f36:	b002      	add	sp, #8
 8004f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3c:	b004      	add	sp, #16
 8004f3e:	4770      	bx	lr
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <std>:
 8004f44:	2300      	movs	r3, #0
 8004f46:	b510      	push	{r4, lr}
 8004f48:	4604      	mov	r4, r0
 8004f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f52:	6083      	str	r3, [r0, #8]
 8004f54:	8181      	strh	r1, [r0, #12]
 8004f56:	6643      	str	r3, [r0, #100]	; 0x64
 8004f58:	81c2      	strh	r2, [r0, #14]
 8004f5a:	6183      	str	r3, [r0, #24]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	2208      	movs	r2, #8
 8004f60:	305c      	adds	r0, #92	; 0x5c
 8004f62:	f7ff ffcf 	bl	8004f04 <memset>
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <std+0x38>)
 8004f68:	6263      	str	r3, [r4, #36]	; 0x24
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <std+0x3c>)
 8004f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <std+0x40>)
 8004f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <std+0x44>)
 8004f74:	6224      	str	r4, [r4, #32]
 8004f76:	6323      	str	r3, [r4, #48]	; 0x30
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop
 8004f7c:	08005859 	.word	0x08005859
 8004f80:	0800587b 	.word	0x0800587b
 8004f84:	080058b3 	.word	0x080058b3
 8004f88:	080058d7 	.word	0x080058d7

08004f8c <_cleanup_r>:
 8004f8c:	4901      	ldr	r1, [pc, #4]	; (8004f94 <_cleanup_r+0x8>)
 8004f8e:	f000 b8af 	b.w	80050f0 <_fwalk_reent>
 8004f92:	bf00      	nop
 8004f94:	08005bb1 	.word	0x08005bb1

08004f98 <__sfmoreglue>:
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	2268      	movs	r2, #104	; 0x68
 8004f9c:	1e4d      	subs	r5, r1, #1
 8004f9e:	4355      	muls	r5, r2
 8004fa0:	460e      	mov	r6, r1
 8004fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fa6:	f000 f8e5 	bl	8005174 <_malloc_r>
 8004faa:	4604      	mov	r4, r0
 8004fac:	b140      	cbz	r0, 8004fc0 <__sfmoreglue+0x28>
 8004fae:	2100      	movs	r1, #0
 8004fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8004fb4:	300c      	adds	r0, #12
 8004fb6:	60a0      	str	r0, [r4, #8]
 8004fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fbc:	f7ff ffa2 	bl	8004f04 <memset>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}

08004fc4 <__sfp_lock_acquire>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__sfp_lock_acquire+0x8>)
 8004fc6:	f000 b8b3 	b.w	8005130 <__retarget_lock_acquire_recursive>
 8004fca:	bf00      	nop
 8004fcc:	200001b1 	.word	0x200001b1

08004fd0 <__sfp_lock_release>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__sfp_lock_release+0x8>)
 8004fd2:	f000 b8ae 	b.w	8005132 <__retarget_lock_release_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	200001b1 	.word	0x200001b1

08004fdc <__sinit_lock_acquire>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__sinit_lock_acquire+0x8>)
 8004fde:	f000 b8a7 	b.w	8005130 <__retarget_lock_acquire_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	200001b2 	.word	0x200001b2

08004fe8 <__sinit_lock_release>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__sinit_lock_release+0x8>)
 8004fea:	f000 b8a2 	b.w	8005132 <__retarget_lock_release_recursive>
 8004fee:	bf00      	nop
 8004ff0:	200001b2 	.word	0x200001b2

08004ff4 <__sinit>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	f7ff fff0 	bl	8004fdc <__sinit_lock_acquire>
 8004ffc:	69a3      	ldr	r3, [r4, #24]
 8004ffe:	b11b      	cbz	r3, 8005008 <__sinit+0x14>
 8005000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005004:	f7ff bff0 	b.w	8004fe8 <__sinit_lock_release>
 8005008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800500c:	6523      	str	r3, [r4, #80]	; 0x50
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <__sinit+0x68>)
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <__sinit+0x6c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	62a2      	str	r2, [r4, #40]	; 0x28
 8005016:	42a3      	cmp	r3, r4
 8005018:	bf04      	itt	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	61a3      	streq	r3, [r4, #24]
 800501e:	4620      	mov	r0, r4
 8005020:	f000 f820 	bl	8005064 <__sfp>
 8005024:	6060      	str	r0, [r4, #4]
 8005026:	4620      	mov	r0, r4
 8005028:	f000 f81c 	bl	8005064 <__sfp>
 800502c:	60a0      	str	r0, [r4, #8]
 800502e:	4620      	mov	r0, r4
 8005030:	f000 f818 	bl	8005064 <__sfp>
 8005034:	2200      	movs	r2, #0
 8005036:	60e0      	str	r0, [r4, #12]
 8005038:	2104      	movs	r1, #4
 800503a:	6860      	ldr	r0, [r4, #4]
 800503c:	f7ff ff82 	bl	8004f44 <std>
 8005040:	68a0      	ldr	r0, [r4, #8]
 8005042:	2201      	movs	r2, #1
 8005044:	2109      	movs	r1, #9
 8005046:	f7ff ff7d 	bl	8004f44 <std>
 800504a:	68e0      	ldr	r0, [r4, #12]
 800504c:	2202      	movs	r2, #2
 800504e:	2112      	movs	r1, #18
 8005050:	f7ff ff78 	bl	8004f44 <std>
 8005054:	2301      	movs	r3, #1
 8005056:	61a3      	str	r3, [r4, #24]
 8005058:	e7d2      	b.n	8005000 <__sinit+0xc>
 800505a:	bf00      	nop
 800505c:	08005ea8 	.word	0x08005ea8
 8005060:	08004f8d 	.word	0x08004f8d

08005064 <__sfp>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	4607      	mov	r7, r0
 8005068:	f7ff ffac 	bl	8004fc4 <__sfp_lock_acquire>
 800506c:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <__sfp+0x84>)
 800506e:	681e      	ldr	r6, [r3, #0]
 8005070:	69b3      	ldr	r3, [r6, #24]
 8005072:	b913      	cbnz	r3, 800507a <__sfp+0x16>
 8005074:	4630      	mov	r0, r6
 8005076:	f7ff ffbd 	bl	8004ff4 <__sinit>
 800507a:	3648      	adds	r6, #72	; 0x48
 800507c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005080:	3b01      	subs	r3, #1
 8005082:	d503      	bpl.n	800508c <__sfp+0x28>
 8005084:	6833      	ldr	r3, [r6, #0]
 8005086:	b30b      	cbz	r3, 80050cc <__sfp+0x68>
 8005088:	6836      	ldr	r6, [r6, #0]
 800508a:	e7f7      	b.n	800507c <__sfp+0x18>
 800508c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005090:	b9d5      	cbnz	r5, 80050c8 <__sfp+0x64>
 8005092:	4b16      	ldr	r3, [pc, #88]	; (80050ec <__sfp+0x88>)
 8005094:	60e3      	str	r3, [r4, #12]
 8005096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800509a:	6665      	str	r5, [r4, #100]	; 0x64
 800509c:	f000 f847 	bl	800512e <__retarget_lock_init_recursive>
 80050a0:	f7ff ff96 	bl	8004fd0 <__sfp_lock_release>
 80050a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050ac:	6025      	str	r5, [r4, #0]
 80050ae:	61a5      	str	r5, [r4, #24]
 80050b0:	2208      	movs	r2, #8
 80050b2:	4629      	mov	r1, r5
 80050b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050b8:	f7ff ff24 	bl	8004f04 <memset>
 80050bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050c4:	4620      	mov	r0, r4
 80050c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c8:	3468      	adds	r4, #104	; 0x68
 80050ca:	e7d9      	b.n	8005080 <__sfp+0x1c>
 80050cc:	2104      	movs	r1, #4
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7ff ff62 	bl	8004f98 <__sfmoreglue>
 80050d4:	4604      	mov	r4, r0
 80050d6:	6030      	str	r0, [r6, #0]
 80050d8:	2800      	cmp	r0, #0
 80050da:	d1d5      	bne.n	8005088 <__sfp+0x24>
 80050dc:	f7ff ff78 	bl	8004fd0 <__sfp_lock_release>
 80050e0:	230c      	movs	r3, #12
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	e7ee      	b.n	80050c4 <__sfp+0x60>
 80050e6:	bf00      	nop
 80050e8:	08005ea8 	.word	0x08005ea8
 80050ec:	ffff0001 	.word	0xffff0001

080050f0 <_fwalk_reent>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	4606      	mov	r6, r0
 80050f6:	4688      	mov	r8, r1
 80050f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050fc:	2700      	movs	r7, #0
 80050fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005102:	f1b9 0901 	subs.w	r9, r9, #1
 8005106:	d505      	bpl.n	8005114 <_fwalk_reent+0x24>
 8005108:	6824      	ldr	r4, [r4, #0]
 800510a:	2c00      	cmp	r4, #0
 800510c:	d1f7      	bne.n	80050fe <_fwalk_reent+0xe>
 800510e:	4638      	mov	r0, r7
 8005110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005114:	89ab      	ldrh	r3, [r5, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d907      	bls.n	800512a <_fwalk_reent+0x3a>
 800511a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800511e:	3301      	adds	r3, #1
 8005120:	d003      	beq.n	800512a <_fwalk_reent+0x3a>
 8005122:	4629      	mov	r1, r5
 8005124:	4630      	mov	r0, r6
 8005126:	47c0      	blx	r8
 8005128:	4307      	orrs	r7, r0
 800512a:	3568      	adds	r5, #104	; 0x68
 800512c:	e7e9      	b.n	8005102 <_fwalk_reent+0x12>

0800512e <__retarget_lock_init_recursive>:
 800512e:	4770      	bx	lr

08005130 <__retarget_lock_acquire_recursive>:
 8005130:	4770      	bx	lr

08005132 <__retarget_lock_release_recursive>:
 8005132:	4770      	bx	lr

08005134 <sbrk_aligned>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4e0e      	ldr	r6, [pc, #56]	; (8005170 <sbrk_aligned+0x3c>)
 8005138:	460c      	mov	r4, r1
 800513a:	6831      	ldr	r1, [r6, #0]
 800513c:	4605      	mov	r5, r0
 800513e:	b911      	cbnz	r1, 8005146 <sbrk_aligned+0x12>
 8005140:	f000 fb7a 	bl	8005838 <_sbrk_r>
 8005144:	6030      	str	r0, [r6, #0]
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	f000 fb75 	bl	8005838 <_sbrk_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	d00a      	beq.n	8005168 <sbrk_aligned+0x34>
 8005152:	1cc4      	adds	r4, r0, #3
 8005154:	f024 0403 	bic.w	r4, r4, #3
 8005158:	42a0      	cmp	r0, r4
 800515a:	d007      	beq.n	800516c <sbrk_aligned+0x38>
 800515c:	1a21      	subs	r1, r4, r0
 800515e:	4628      	mov	r0, r5
 8005160:	f000 fb6a 	bl	8005838 <_sbrk_r>
 8005164:	3001      	adds	r0, #1
 8005166:	d101      	bne.n	800516c <sbrk_aligned+0x38>
 8005168:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800516c:	4620      	mov	r0, r4
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	200001b8 	.word	0x200001b8

08005174 <_malloc_r>:
 8005174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005178:	1ccd      	adds	r5, r1, #3
 800517a:	f025 0503 	bic.w	r5, r5, #3
 800517e:	3508      	adds	r5, #8
 8005180:	2d0c      	cmp	r5, #12
 8005182:	bf38      	it	cc
 8005184:	250c      	movcc	r5, #12
 8005186:	2d00      	cmp	r5, #0
 8005188:	4607      	mov	r7, r0
 800518a:	db01      	blt.n	8005190 <_malloc_r+0x1c>
 800518c:	42a9      	cmp	r1, r5
 800518e:	d905      	bls.n	800519c <_malloc_r+0x28>
 8005190:	230c      	movs	r3, #12
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	2600      	movs	r6, #0
 8005196:	4630      	mov	r0, r6
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4e2e      	ldr	r6, [pc, #184]	; (8005258 <_malloc_r+0xe4>)
 800519e:	f000 fdbb 	bl	8005d18 <__malloc_lock>
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	461c      	mov	r4, r3
 80051a6:	bb34      	cbnz	r4, 80051f6 <_malloc_r+0x82>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7ff ffc2 	bl	8005134 <sbrk_aligned>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	4604      	mov	r4, r0
 80051b4:	d14d      	bne.n	8005252 <_malloc_r+0xde>
 80051b6:	6834      	ldr	r4, [r6, #0]
 80051b8:	4626      	mov	r6, r4
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d140      	bne.n	8005240 <_malloc_r+0xcc>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	4631      	mov	r1, r6
 80051c2:	4638      	mov	r0, r7
 80051c4:	eb04 0803 	add.w	r8, r4, r3
 80051c8:	f000 fb36 	bl	8005838 <_sbrk_r>
 80051cc:	4580      	cmp	r8, r0
 80051ce:	d13a      	bne.n	8005246 <_malloc_r+0xd2>
 80051d0:	6821      	ldr	r1, [r4, #0]
 80051d2:	3503      	adds	r5, #3
 80051d4:	1a6d      	subs	r5, r5, r1
 80051d6:	f025 0503 	bic.w	r5, r5, #3
 80051da:	3508      	adds	r5, #8
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	bf38      	it	cc
 80051e0:	250c      	movcc	r5, #12
 80051e2:	4629      	mov	r1, r5
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff ffa5 	bl	8005134 <sbrk_aligned>
 80051ea:	3001      	adds	r0, #1
 80051ec:	d02b      	beq.n	8005246 <_malloc_r+0xd2>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	442b      	add	r3, r5
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	e00e      	b.n	8005214 <_malloc_r+0xa0>
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	1b52      	subs	r2, r2, r5
 80051fa:	d41e      	bmi.n	800523a <_malloc_r+0xc6>
 80051fc:	2a0b      	cmp	r2, #11
 80051fe:	d916      	bls.n	800522e <_malloc_r+0xba>
 8005200:	1961      	adds	r1, r4, r5
 8005202:	42a3      	cmp	r3, r4
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	bf18      	it	ne
 8005208:	6059      	strne	r1, [r3, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	bf08      	it	eq
 800520e:	6031      	streq	r1, [r6, #0]
 8005210:	5162      	str	r2, [r4, r5]
 8005212:	604b      	str	r3, [r1, #4]
 8005214:	4638      	mov	r0, r7
 8005216:	f104 060b 	add.w	r6, r4, #11
 800521a:	f000 fd83 	bl	8005d24 <__malloc_unlock>
 800521e:	f026 0607 	bic.w	r6, r6, #7
 8005222:	1d23      	adds	r3, r4, #4
 8005224:	1af2      	subs	r2, r6, r3
 8005226:	d0b6      	beq.n	8005196 <_malloc_r+0x22>
 8005228:	1b9b      	subs	r3, r3, r6
 800522a:	50a3      	str	r3, [r4, r2]
 800522c:	e7b3      	b.n	8005196 <_malloc_r+0x22>
 800522e:	6862      	ldr	r2, [r4, #4]
 8005230:	42a3      	cmp	r3, r4
 8005232:	bf0c      	ite	eq
 8005234:	6032      	streq	r2, [r6, #0]
 8005236:	605a      	strne	r2, [r3, #4]
 8005238:	e7ec      	b.n	8005214 <_malloc_r+0xa0>
 800523a:	4623      	mov	r3, r4
 800523c:	6864      	ldr	r4, [r4, #4]
 800523e:	e7b2      	b.n	80051a6 <_malloc_r+0x32>
 8005240:	4634      	mov	r4, r6
 8005242:	6876      	ldr	r6, [r6, #4]
 8005244:	e7b9      	b.n	80051ba <_malloc_r+0x46>
 8005246:	230c      	movs	r3, #12
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4638      	mov	r0, r7
 800524c:	f000 fd6a 	bl	8005d24 <__malloc_unlock>
 8005250:	e7a1      	b.n	8005196 <_malloc_r+0x22>
 8005252:	6025      	str	r5, [r4, #0]
 8005254:	e7de      	b.n	8005214 <_malloc_r+0xa0>
 8005256:	bf00      	nop
 8005258:	200001b4 	.word	0x200001b4

0800525c <__sfputc_r>:
 800525c:	6893      	ldr	r3, [r2, #8]
 800525e:	3b01      	subs	r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	b410      	push	{r4}
 8005264:	6093      	str	r3, [r2, #8]
 8005266:	da08      	bge.n	800527a <__sfputc_r+0x1e>
 8005268:	6994      	ldr	r4, [r2, #24]
 800526a:	42a3      	cmp	r3, r4
 800526c:	db01      	blt.n	8005272 <__sfputc_r+0x16>
 800526e:	290a      	cmp	r1, #10
 8005270:	d103      	bne.n	800527a <__sfputc_r+0x1e>
 8005272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005276:	f000 bb33 	b.w	80058e0 <__swbuf_r>
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	1c58      	adds	r0, r3, #1
 800527e:	6010      	str	r0, [r2, #0]
 8005280:	7019      	strb	r1, [r3, #0]
 8005282:	4608      	mov	r0, r1
 8005284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005288:	4770      	bx	lr

0800528a <__sfputs_r>:
 800528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528c:	4606      	mov	r6, r0
 800528e:	460f      	mov	r7, r1
 8005290:	4614      	mov	r4, r2
 8005292:	18d5      	adds	r5, r2, r3
 8005294:	42ac      	cmp	r4, r5
 8005296:	d101      	bne.n	800529c <__sfputs_r+0x12>
 8005298:	2000      	movs	r0, #0
 800529a:	e007      	b.n	80052ac <__sfputs_r+0x22>
 800529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a0:	463a      	mov	r2, r7
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7ff ffda 	bl	800525c <__sfputc_r>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d1f3      	bne.n	8005294 <__sfputs_r+0xa>
 80052ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052b0 <_vfiprintf_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	460d      	mov	r5, r1
 80052b6:	b09d      	sub	sp, #116	; 0x74
 80052b8:	4614      	mov	r4, r2
 80052ba:	4698      	mov	r8, r3
 80052bc:	4606      	mov	r6, r0
 80052be:	b118      	cbz	r0, 80052c8 <_vfiprintf_r+0x18>
 80052c0:	6983      	ldr	r3, [r0, #24]
 80052c2:	b90b      	cbnz	r3, 80052c8 <_vfiprintf_r+0x18>
 80052c4:	f7ff fe96 	bl	8004ff4 <__sinit>
 80052c8:	4b89      	ldr	r3, [pc, #548]	; (80054f0 <_vfiprintf_r+0x240>)
 80052ca:	429d      	cmp	r5, r3
 80052cc:	d11b      	bne.n	8005306 <_vfiprintf_r+0x56>
 80052ce:	6875      	ldr	r5, [r6, #4]
 80052d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052d2:	07d9      	lsls	r1, r3, #31
 80052d4:	d405      	bmi.n	80052e2 <_vfiprintf_r+0x32>
 80052d6:	89ab      	ldrh	r3, [r5, #12]
 80052d8:	059a      	lsls	r2, r3, #22
 80052da:	d402      	bmi.n	80052e2 <_vfiprintf_r+0x32>
 80052dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052de:	f7ff ff27 	bl	8005130 <__retarget_lock_acquire_recursive>
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	071b      	lsls	r3, r3, #28
 80052e6:	d501      	bpl.n	80052ec <_vfiprintf_r+0x3c>
 80052e8:	692b      	ldr	r3, [r5, #16]
 80052ea:	b9eb      	cbnz	r3, 8005328 <_vfiprintf_r+0x78>
 80052ec:	4629      	mov	r1, r5
 80052ee:	4630      	mov	r0, r6
 80052f0:	f000 fb5a 	bl	80059a8 <__swsetup_r>
 80052f4:	b1c0      	cbz	r0, 8005328 <_vfiprintf_r+0x78>
 80052f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052f8:	07dc      	lsls	r4, r3, #31
 80052fa:	d50e      	bpl.n	800531a <_vfiprintf_r+0x6a>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005300:	b01d      	add	sp, #116	; 0x74
 8005302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005306:	4b7b      	ldr	r3, [pc, #492]	; (80054f4 <_vfiprintf_r+0x244>)
 8005308:	429d      	cmp	r5, r3
 800530a:	d101      	bne.n	8005310 <_vfiprintf_r+0x60>
 800530c:	68b5      	ldr	r5, [r6, #8]
 800530e:	e7df      	b.n	80052d0 <_vfiprintf_r+0x20>
 8005310:	4b79      	ldr	r3, [pc, #484]	; (80054f8 <_vfiprintf_r+0x248>)
 8005312:	429d      	cmp	r5, r3
 8005314:	bf08      	it	eq
 8005316:	68f5      	ldreq	r5, [r6, #12]
 8005318:	e7da      	b.n	80052d0 <_vfiprintf_r+0x20>
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	0598      	lsls	r0, r3, #22
 800531e:	d4ed      	bmi.n	80052fc <_vfiprintf_r+0x4c>
 8005320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005322:	f7ff ff06 	bl	8005132 <__retarget_lock_release_recursive>
 8005326:	e7e9      	b.n	80052fc <_vfiprintf_r+0x4c>
 8005328:	2300      	movs	r3, #0
 800532a:	9309      	str	r3, [sp, #36]	; 0x24
 800532c:	2320      	movs	r3, #32
 800532e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005332:	f8cd 800c 	str.w	r8, [sp, #12]
 8005336:	2330      	movs	r3, #48	; 0x30
 8005338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80054fc <_vfiprintf_r+0x24c>
 800533c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005340:	f04f 0901 	mov.w	r9, #1
 8005344:	4623      	mov	r3, r4
 8005346:	469a      	mov	sl, r3
 8005348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800534c:	b10a      	cbz	r2, 8005352 <_vfiprintf_r+0xa2>
 800534e:	2a25      	cmp	r2, #37	; 0x25
 8005350:	d1f9      	bne.n	8005346 <_vfiprintf_r+0x96>
 8005352:	ebba 0b04 	subs.w	fp, sl, r4
 8005356:	d00b      	beq.n	8005370 <_vfiprintf_r+0xc0>
 8005358:	465b      	mov	r3, fp
 800535a:	4622      	mov	r2, r4
 800535c:	4629      	mov	r1, r5
 800535e:	4630      	mov	r0, r6
 8005360:	f7ff ff93 	bl	800528a <__sfputs_r>
 8005364:	3001      	adds	r0, #1
 8005366:	f000 80aa 	beq.w	80054be <_vfiprintf_r+0x20e>
 800536a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800536c:	445a      	add	r2, fp
 800536e:	9209      	str	r2, [sp, #36]	; 0x24
 8005370:	f89a 3000 	ldrb.w	r3, [sl]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80a2 	beq.w	80054be <_vfiprintf_r+0x20e>
 800537a:	2300      	movs	r3, #0
 800537c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005384:	f10a 0a01 	add.w	sl, sl, #1
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	9307      	str	r3, [sp, #28]
 800538c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005390:	931a      	str	r3, [sp, #104]	; 0x68
 8005392:	4654      	mov	r4, sl
 8005394:	2205      	movs	r2, #5
 8005396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539a:	4858      	ldr	r0, [pc, #352]	; (80054fc <_vfiprintf_r+0x24c>)
 800539c:	f7fa ff18 	bl	80001d0 <memchr>
 80053a0:	9a04      	ldr	r2, [sp, #16]
 80053a2:	b9d8      	cbnz	r0, 80053dc <_vfiprintf_r+0x12c>
 80053a4:	06d1      	lsls	r1, r2, #27
 80053a6:	bf44      	itt	mi
 80053a8:	2320      	movmi	r3, #32
 80053aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ae:	0713      	lsls	r3, r2, #28
 80053b0:	bf44      	itt	mi
 80053b2:	232b      	movmi	r3, #43	; 0x2b
 80053b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b8:	f89a 3000 	ldrb.w	r3, [sl]
 80053bc:	2b2a      	cmp	r3, #42	; 0x2a
 80053be:	d015      	beq.n	80053ec <_vfiprintf_r+0x13c>
 80053c0:	9a07      	ldr	r2, [sp, #28]
 80053c2:	4654      	mov	r4, sl
 80053c4:	2000      	movs	r0, #0
 80053c6:	f04f 0c0a 	mov.w	ip, #10
 80053ca:	4621      	mov	r1, r4
 80053cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053d0:	3b30      	subs	r3, #48	; 0x30
 80053d2:	2b09      	cmp	r3, #9
 80053d4:	d94e      	bls.n	8005474 <_vfiprintf_r+0x1c4>
 80053d6:	b1b0      	cbz	r0, 8005406 <_vfiprintf_r+0x156>
 80053d8:	9207      	str	r2, [sp, #28]
 80053da:	e014      	b.n	8005406 <_vfiprintf_r+0x156>
 80053dc:	eba0 0308 	sub.w	r3, r0, r8
 80053e0:	fa09 f303 	lsl.w	r3, r9, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	46a2      	mov	sl, r4
 80053ea:	e7d2      	b.n	8005392 <_vfiprintf_r+0xe2>
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	1d19      	adds	r1, r3, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	9103      	str	r1, [sp, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bfbb      	ittet	lt
 80053f8:	425b      	neglt	r3, r3
 80053fa:	f042 0202 	orrlt.w	r2, r2, #2
 80053fe:	9307      	strge	r3, [sp, #28]
 8005400:	9307      	strlt	r3, [sp, #28]
 8005402:	bfb8      	it	lt
 8005404:	9204      	strlt	r2, [sp, #16]
 8005406:	7823      	ldrb	r3, [r4, #0]
 8005408:	2b2e      	cmp	r3, #46	; 0x2e
 800540a:	d10c      	bne.n	8005426 <_vfiprintf_r+0x176>
 800540c:	7863      	ldrb	r3, [r4, #1]
 800540e:	2b2a      	cmp	r3, #42	; 0x2a
 8005410:	d135      	bne.n	800547e <_vfiprintf_r+0x1ce>
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	1d1a      	adds	r2, r3, #4
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	9203      	str	r2, [sp, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	bfb8      	it	lt
 800541e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005422:	3402      	adds	r4, #2
 8005424:	9305      	str	r3, [sp, #20]
 8005426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800550c <_vfiprintf_r+0x25c>
 800542a:	7821      	ldrb	r1, [r4, #0]
 800542c:	2203      	movs	r2, #3
 800542e:	4650      	mov	r0, sl
 8005430:	f7fa fece 	bl	80001d0 <memchr>
 8005434:	b140      	cbz	r0, 8005448 <_vfiprintf_r+0x198>
 8005436:	2340      	movs	r3, #64	; 0x40
 8005438:	eba0 000a 	sub.w	r0, r0, sl
 800543c:	fa03 f000 	lsl.w	r0, r3, r0
 8005440:	9b04      	ldr	r3, [sp, #16]
 8005442:	4303      	orrs	r3, r0
 8005444:	3401      	adds	r4, #1
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544c:	482c      	ldr	r0, [pc, #176]	; (8005500 <_vfiprintf_r+0x250>)
 800544e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005452:	2206      	movs	r2, #6
 8005454:	f7fa febc 	bl	80001d0 <memchr>
 8005458:	2800      	cmp	r0, #0
 800545a:	d03f      	beq.n	80054dc <_vfiprintf_r+0x22c>
 800545c:	4b29      	ldr	r3, [pc, #164]	; (8005504 <_vfiprintf_r+0x254>)
 800545e:	bb1b      	cbnz	r3, 80054a8 <_vfiprintf_r+0x1f8>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	3307      	adds	r3, #7
 8005464:	f023 0307 	bic.w	r3, r3, #7
 8005468:	3308      	adds	r3, #8
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546e:	443b      	add	r3, r7
 8005470:	9309      	str	r3, [sp, #36]	; 0x24
 8005472:	e767      	b.n	8005344 <_vfiprintf_r+0x94>
 8005474:	fb0c 3202 	mla	r2, ip, r2, r3
 8005478:	460c      	mov	r4, r1
 800547a:	2001      	movs	r0, #1
 800547c:	e7a5      	b.n	80053ca <_vfiprintf_r+0x11a>
 800547e:	2300      	movs	r3, #0
 8005480:	3401      	adds	r4, #1
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	4619      	mov	r1, r3
 8005486:	f04f 0c0a 	mov.w	ip, #10
 800548a:	4620      	mov	r0, r4
 800548c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005490:	3a30      	subs	r2, #48	; 0x30
 8005492:	2a09      	cmp	r2, #9
 8005494:	d903      	bls.n	800549e <_vfiprintf_r+0x1ee>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0c5      	beq.n	8005426 <_vfiprintf_r+0x176>
 800549a:	9105      	str	r1, [sp, #20]
 800549c:	e7c3      	b.n	8005426 <_vfiprintf_r+0x176>
 800549e:	fb0c 2101 	mla	r1, ip, r1, r2
 80054a2:	4604      	mov	r4, r0
 80054a4:	2301      	movs	r3, #1
 80054a6:	e7f0      	b.n	800548a <_vfiprintf_r+0x1da>
 80054a8:	ab03      	add	r3, sp, #12
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	462a      	mov	r2, r5
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <_vfiprintf_r+0x258>)
 80054b0:	a904      	add	r1, sp, #16
 80054b2:	4630      	mov	r0, r6
 80054b4:	f3af 8000 	nop.w
 80054b8:	4607      	mov	r7, r0
 80054ba:	1c78      	adds	r0, r7, #1
 80054bc:	d1d6      	bne.n	800546c <_vfiprintf_r+0x1bc>
 80054be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054c0:	07d9      	lsls	r1, r3, #31
 80054c2:	d405      	bmi.n	80054d0 <_vfiprintf_r+0x220>
 80054c4:	89ab      	ldrh	r3, [r5, #12]
 80054c6:	059a      	lsls	r2, r3, #22
 80054c8:	d402      	bmi.n	80054d0 <_vfiprintf_r+0x220>
 80054ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054cc:	f7ff fe31 	bl	8005132 <__retarget_lock_release_recursive>
 80054d0:	89ab      	ldrh	r3, [r5, #12]
 80054d2:	065b      	lsls	r3, r3, #25
 80054d4:	f53f af12 	bmi.w	80052fc <_vfiprintf_r+0x4c>
 80054d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054da:	e711      	b.n	8005300 <_vfiprintf_r+0x50>
 80054dc:	ab03      	add	r3, sp, #12
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	462a      	mov	r2, r5
 80054e2:	4b09      	ldr	r3, [pc, #36]	; (8005508 <_vfiprintf_r+0x258>)
 80054e4:	a904      	add	r1, sp, #16
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 f880 	bl	80055ec <_printf_i>
 80054ec:	e7e4      	b.n	80054b8 <_vfiprintf_r+0x208>
 80054ee:	bf00      	nop
 80054f0:	08005ecc 	.word	0x08005ecc
 80054f4:	08005eec 	.word	0x08005eec
 80054f8:	08005eac 	.word	0x08005eac
 80054fc:	08005f0c 	.word	0x08005f0c
 8005500:	08005f16 	.word	0x08005f16
 8005504:	00000000 	.word	0x00000000
 8005508:	0800528b 	.word	0x0800528b
 800550c:	08005f12 	.word	0x08005f12

08005510 <_printf_common>:
 8005510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	4616      	mov	r6, r2
 8005516:	4699      	mov	r9, r3
 8005518:	688a      	ldr	r2, [r1, #8]
 800551a:	690b      	ldr	r3, [r1, #16]
 800551c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005520:	4293      	cmp	r3, r2
 8005522:	bfb8      	it	lt
 8005524:	4613      	movlt	r3, r2
 8005526:	6033      	str	r3, [r6, #0]
 8005528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800552c:	4607      	mov	r7, r0
 800552e:	460c      	mov	r4, r1
 8005530:	b10a      	cbz	r2, 8005536 <_printf_common+0x26>
 8005532:	3301      	adds	r3, #1
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	0699      	lsls	r1, r3, #26
 800553a:	bf42      	ittt	mi
 800553c:	6833      	ldrmi	r3, [r6, #0]
 800553e:	3302      	addmi	r3, #2
 8005540:	6033      	strmi	r3, [r6, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	f015 0506 	ands.w	r5, r5, #6
 8005548:	d106      	bne.n	8005558 <_printf_common+0x48>
 800554a:	f104 0a19 	add.w	sl, r4, #25
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	6832      	ldr	r2, [r6, #0]
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	42ab      	cmp	r3, r5
 8005556:	dc26      	bgt.n	80055a6 <_printf_common+0x96>
 8005558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800555c:	1e13      	subs	r3, r2, #0
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	bf18      	it	ne
 8005562:	2301      	movne	r3, #1
 8005564:	0692      	lsls	r2, r2, #26
 8005566:	d42b      	bmi.n	80055c0 <_printf_common+0xb0>
 8005568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800556c:	4649      	mov	r1, r9
 800556e:	4638      	mov	r0, r7
 8005570:	47c0      	blx	r8
 8005572:	3001      	adds	r0, #1
 8005574:	d01e      	beq.n	80055b4 <_printf_common+0xa4>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	68e5      	ldr	r5, [r4, #12]
 800557a:	6832      	ldr	r2, [r6, #0]
 800557c:	f003 0306 	and.w	r3, r3, #6
 8005580:	2b04      	cmp	r3, #4
 8005582:	bf08      	it	eq
 8005584:	1aad      	subeq	r5, r5, r2
 8005586:	68a3      	ldr	r3, [r4, #8]
 8005588:	6922      	ldr	r2, [r4, #16]
 800558a:	bf0c      	ite	eq
 800558c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005590:	2500      	movne	r5, #0
 8005592:	4293      	cmp	r3, r2
 8005594:	bfc4      	itt	gt
 8005596:	1a9b      	subgt	r3, r3, r2
 8005598:	18ed      	addgt	r5, r5, r3
 800559a:	2600      	movs	r6, #0
 800559c:	341a      	adds	r4, #26
 800559e:	42b5      	cmp	r5, r6
 80055a0:	d11a      	bne.n	80055d8 <_printf_common+0xc8>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e008      	b.n	80055b8 <_printf_common+0xa8>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4652      	mov	r2, sl
 80055aa:	4649      	mov	r1, r9
 80055ac:	4638      	mov	r0, r7
 80055ae:	47c0      	blx	r8
 80055b0:	3001      	adds	r0, #1
 80055b2:	d103      	bne.n	80055bc <_printf_common+0xac>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	3501      	adds	r5, #1
 80055be:	e7c6      	b.n	800554e <_printf_common+0x3e>
 80055c0:	18e1      	adds	r1, r4, r3
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	2030      	movs	r0, #48	; 0x30
 80055c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ca:	4422      	add	r2, r4
 80055cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055d4:	3302      	adds	r3, #2
 80055d6:	e7c7      	b.n	8005568 <_printf_common+0x58>
 80055d8:	2301      	movs	r3, #1
 80055da:	4622      	mov	r2, r4
 80055dc:	4649      	mov	r1, r9
 80055de:	4638      	mov	r0, r7
 80055e0:	47c0      	blx	r8
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0e6      	beq.n	80055b4 <_printf_common+0xa4>
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7d9      	b.n	800559e <_printf_common+0x8e>
	...

080055ec <_printf_i>:
 80055ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	7e0f      	ldrb	r7, [r1, #24]
 80055f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055f4:	2f78      	cmp	r7, #120	; 0x78
 80055f6:	4691      	mov	r9, r2
 80055f8:	4680      	mov	r8, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	469a      	mov	sl, r3
 80055fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005602:	d807      	bhi.n	8005614 <_printf_i+0x28>
 8005604:	2f62      	cmp	r7, #98	; 0x62
 8005606:	d80a      	bhi.n	800561e <_printf_i+0x32>
 8005608:	2f00      	cmp	r7, #0
 800560a:	f000 80d8 	beq.w	80057be <_printf_i+0x1d2>
 800560e:	2f58      	cmp	r7, #88	; 0x58
 8005610:	f000 80a3 	beq.w	800575a <_printf_i+0x16e>
 8005614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800561c:	e03a      	b.n	8005694 <_printf_i+0xa8>
 800561e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005622:	2b15      	cmp	r3, #21
 8005624:	d8f6      	bhi.n	8005614 <_printf_i+0x28>
 8005626:	a101      	add	r1, pc, #4	; (adr r1, 800562c <_printf_i+0x40>)
 8005628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800562c:	08005685 	.word	0x08005685
 8005630:	08005699 	.word	0x08005699
 8005634:	08005615 	.word	0x08005615
 8005638:	08005615 	.word	0x08005615
 800563c:	08005615 	.word	0x08005615
 8005640:	08005615 	.word	0x08005615
 8005644:	08005699 	.word	0x08005699
 8005648:	08005615 	.word	0x08005615
 800564c:	08005615 	.word	0x08005615
 8005650:	08005615 	.word	0x08005615
 8005654:	08005615 	.word	0x08005615
 8005658:	080057a5 	.word	0x080057a5
 800565c:	080056c9 	.word	0x080056c9
 8005660:	08005787 	.word	0x08005787
 8005664:	08005615 	.word	0x08005615
 8005668:	08005615 	.word	0x08005615
 800566c:	080057c7 	.word	0x080057c7
 8005670:	08005615 	.word	0x08005615
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005615 	.word	0x08005615
 800567c:	08005615 	.word	0x08005615
 8005680:	0800578f 	.word	0x0800578f
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	1d1a      	adds	r2, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	602a      	str	r2, [r5, #0]
 800568c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005694:	2301      	movs	r3, #1
 8005696:	e0a3      	b.n	80057e0 <_printf_i+0x1f4>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	6829      	ldr	r1, [r5, #0]
 800569c:	0606      	lsls	r6, r0, #24
 800569e:	f101 0304 	add.w	r3, r1, #4
 80056a2:	d50a      	bpl.n	80056ba <_printf_i+0xce>
 80056a4:	680e      	ldr	r6, [r1, #0]
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	da03      	bge.n	80056b4 <_printf_i+0xc8>
 80056ac:	232d      	movs	r3, #45	; 0x2d
 80056ae:	4276      	negs	r6, r6
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b4:	485e      	ldr	r0, [pc, #376]	; (8005830 <_printf_i+0x244>)
 80056b6:	230a      	movs	r3, #10
 80056b8:	e019      	b.n	80056ee <_printf_i+0x102>
 80056ba:	680e      	ldr	r6, [r1, #0]
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056c2:	bf18      	it	ne
 80056c4:	b236      	sxthne	r6, r6
 80056c6:	e7ef      	b.n	80056a8 <_printf_i+0xbc>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	1d19      	adds	r1, r3, #4
 80056ce:	6029      	str	r1, [r5, #0]
 80056d0:	0601      	lsls	r1, r0, #24
 80056d2:	d501      	bpl.n	80056d8 <_printf_i+0xec>
 80056d4:	681e      	ldr	r6, [r3, #0]
 80056d6:	e002      	b.n	80056de <_printf_i+0xf2>
 80056d8:	0646      	lsls	r6, r0, #25
 80056da:	d5fb      	bpl.n	80056d4 <_printf_i+0xe8>
 80056dc:	881e      	ldrh	r6, [r3, #0]
 80056de:	4854      	ldr	r0, [pc, #336]	; (8005830 <_printf_i+0x244>)
 80056e0:	2f6f      	cmp	r7, #111	; 0x6f
 80056e2:	bf0c      	ite	eq
 80056e4:	2308      	moveq	r3, #8
 80056e6:	230a      	movne	r3, #10
 80056e8:	2100      	movs	r1, #0
 80056ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ee:	6865      	ldr	r5, [r4, #4]
 80056f0:	60a5      	str	r5, [r4, #8]
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	bfa2      	ittt	ge
 80056f6:	6821      	ldrge	r1, [r4, #0]
 80056f8:	f021 0104 	bicge.w	r1, r1, #4
 80056fc:	6021      	strge	r1, [r4, #0]
 80056fe:	b90e      	cbnz	r6, 8005704 <_printf_i+0x118>
 8005700:	2d00      	cmp	r5, #0
 8005702:	d04d      	beq.n	80057a0 <_printf_i+0x1b4>
 8005704:	4615      	mov	r5, r2
 8005706:	fbb6 f1f3 	udiv	r1, r6, r3
 800570a:	fb03 6711 	mls	r7, r3, r1, r6
 800570e:	5dc7      	ldrb	r7, [r0, r7]
 8005710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005714:	4637      	mov	r7, r6
 8005716:	42bb      	cmp	r3, r7
 8005718:	460e      	mov	r6, r1
 800571a:	d9f4      	bls.n	8005706 <_printf_i+0x11a>
 800571c:	2b08      	cmp	r3, #8
 800571e:	d10b      	bne.n	8005738 <_printf_i+0x14c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	07de      	lsls	r6, r3, #31
 8005724:	d508      	bpl.n	8005738 <_printf_i+0x14c>
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	6861      	ldr	r1, [r4, #4]
 800572a:	4299      	cmp	r1, r3
 800572c:	bfde      	ittt	le
 800572e:	2330      	movle	r3, #48	; 0x30
 8005730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005734:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005738:	1b52      	subs	r2, r2, r5
 800573a:	6122      	str	r2, [r4, #16]
 800573c:	f8cd a000 	str.w	sl, [sp]
 8005740:	464b      	mov	r3, r9
 8005742:	aa03      	add	r2, sp, #12
 8005744:	4621      	mov	r1, r4
 8005746:	4640      	mov	r0, r8
 8005748:	f7ff fee2 	bl	8005510 <_printf_common>
 800574c:	3001      	adds	r0, #1
 800574e:	d14c      	bne.n	80057ea <_printf_i+0x1fe>
 8005750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005754:	b004      	add	sp, #16
 8005756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575a:	4835      	ldr	r0, [pc, #212]	; (8005830 <_printf_i+0x244>)
 800575c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005760:	6829      	ldr	r1, [r5, #0]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	f851 6b04 	ldr.w	r6, [r1], #4
 8005768:	6029      	str	r1, [r5, #0]
 800576a:	061d      	lsls	r5, r3, #24
 800576c:	d514      	bpl.n	8005798 <_printf_i+0x1ac>
 800576e:	07df      	lsls	r7, r3, #31
 8005770:	bf44      	itt	mi
 8005772:	f043 0320 	orrmi.w	r3, r3, #32
 8005776:	6023      	strmi	r3, [r4, #0]
 8005778:	b91e      	cbnz	r6, 8005782 <_printf_i+0x196>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	f023 0320 	bic.w	r3, r3, #32
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	2310      	movs	r3, #16
 8005784:	e7b0      	b.n	80056e8 <_printf_i+0xfc>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	f043 0320 	orr.w	r3, r3, #32
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	2378      	movs	r3, #120	; 0x78
 8005790:	4828      	ldr	r0, [pc, #160]	; (8005834 <_printf_i+0x248>)
 8005792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005796:	e7e3      	b.n	8005760 <_printf_i+0x174>
 8005798:	0659      	lsls	r1, r3, #25
 800579a:	bf48      	it	mi
 800579c:	b2b6      	uxthmi	r6, r6
 800579e:	e7e6      	b.n	800576e <_printf_i+0x182>
 80057a0:	4615      	mov	r5, r2
 80057a2:	e7bb      	b.n	800571c <_printf_i+0x130>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	6826      	ldr	r6, [r4, #0]
 80057a8:	6961      	ldr	r1, [r4, #20]
 80057aa:	1d18      	adds	r0, r3, #4
 80057ac:	6028      	str	r0, [r5, #0]
 80057ae:	0635      	lsls	r5, r6, #24
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	d501      	bpl.n	80057b8 <_printf_i+0x1cc>
 80057b4:	6019      	str	r1, [r3, #0]
 80057b6:	e002      	b.n	80057be <_printf_i+0x1d2>
 80057b8:	0670      	lsls	r0, r6, #25
 80057ba:	d5fb      	bpl.n	80057b4 <_printf_i+0x1c8>
 80057bc:	8019      	strh	r1, [r3, #0]
 80057be:	2300      	movs	r3, #0
 80057c0:	6123      	str	r3, [r4, #16]
 80057c2:	4615      	mov	r5, r2
 80057c4:	e7ba      	b.n	800573c <_printf_i+0x150>
 80057c6:	682b      	ldr	r3, [r5, #0]
 80057c8:	1d1a      	adds	r2, r3, #4
 80057ca:	602a      	str	r2, [r5, #0]
 80057cc:	681d      	ldr	r5, [r3, #0]
 80057ce:	6862      	ldr	r2, [r4, #4]
 80057d0:	2100      	movs	r1, #0
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7fa fcfc 	bl	80001d0 <memchr>
 80057d8:	b108      	cbz	r0, 80057de <_printf_i+0x1f2>
 80057da:	1b40      	subs	r0, r0, r5
 80057dc:	6060      	str	r0, [r4, #4]
 80057de:	6863      	ldr	r3, [r4, #4]
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	2300      	movs	r3, #0
 80057e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e8:	e7a8      	b.n	800573c <_printf_i+0x150>
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	462a      	mov	r2, r5
 80057ee:	4649      	mov	r1, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	47d0      	blx	sl
 80057f4:	3001      	adds	r0, #1
 80057f6:	d0ab      	beq.n	8005750 <_printf_i+0x164>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	079b      	lsls	r3, r3, #30
 80057fc:	d413      	bmi.n	8005826 <_printf_i+0x23a>
 80057fe:	68e0      	ldr	r0, [r4, #12]
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	4298      	cmp	r0, r3
 8005804:	bfb8      	it	lt
 8005806:	4618      	movlt	r0, r3
 8005808:	e7a4      	b.n	8005754 <_printf_i+0x168>
 800580a:	2301      	movs	r3, #1
 800580c:	4632      	mov	r2, r6
 800580e:	4649      	mov	r1, r9
 8005810:	4640      	mov	r0, r8
 8005812:	47d0      	blx	sl
 8005814:	3001      	adds	r0, #1
 8005816:	d09b      	beq.n	8005750 <_printf_i+0x164>
 8005818:	3501      	adds	r5, #1
 800581a:	68e3      	ldr	r3, [r4, #12]
 800581c:	9903      	ldr	r1, [sp, #12]
 800581e:	1a5b      	subs	r3, r3, r1
 8005820:	42ab      	cmp	r3, r5
 8005822:	dcf2      	bgt.n	800580a <_printf_i+0x21e>
 8005824:	e7eb      	b.n	80057fe <_printf_i+0x212>
 8005826:	2500      	movs	r5, #0
 8005828:	f104 0619 	add.w	r6, r4, #25
 800582c:	e7f5      	b.n	800581a <_printf_i+0x22e>
 800582e:	bf00      	nop
 8005830:	08005f1d 	.word	0x08005f1d
 8005834:	08005f2e 	.word	0x08005f2e

08005838 <_sbrk_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d06      	ldr	r5, [pc, #24]	; (8005854 <_sbrk_r+0x1c>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fb facc 	bl	8000de0 <_sbrk>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_sbrk_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_sbrk_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	200001bc 	.word	0x200001bc

08005858 <__sread>:
 8005858:	b510      	push	{r4, lr}
 800585a:	460c      	mov	r4, r1
 800585c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005860:	f000 fab2 	bl	8005dc8 <_read_r>
 8005864:	2800      	cmp	r0, #0
 8005866:	bfab      	itete	ge
 8005868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800586a:	89a3      	ldrhlt	r3, [r4, #12]
 800586c:	181b      	addge	r3, r3, r0
 800586e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005872:	bfac      	ite	ge
 8005874:	6563      	strge	r3, [r4, #84]	; 0x54
 8005876:	81a3      	strhlt	r3, [r4, #12]
 8005878:	bd10      	pop	{r4, pc}

0800587a <__swrite>:
 800587a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	461f      	mov	r7, r3
 8005880:	898b      	ldrh	r3, [r1, #12]
 8005882:	05db      	lsls	r3, r3, #23
 8005884:	4605      	mov	r5, r0
 8005886:	460c      	mov	r4, r1
 8005888:	4616      	mov	r6, r2
 800588a:	d505      	bpl.n	8005898 <__swrite+0x1e>
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	2302      	movs	r3, #2
 8005892:	2200      	movs	r2, #0
 8005894:	f000 f9c8 	bl	8005c28 <_lseek_r>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800589e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	4628      	mov	r0, r5
 80058aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	f000 b869 	b.w	8005984 <_write_r>

080058b2 <__sseek>:
 80058b2:	b510      	push	{r4, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ba:	f000 f9b5 	bl	8005c28 <_lseek_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	bf15      	itete	ne
 80058c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ce:	81a3      	strheq	r3, [r4, #12]
 80058d0:	bf18      	it	ne
 80058d2:	81a3      	strhne	r3, [r4, #12]
 80058d4:	bd10      	pop	{r4, pc}

080058d6 <__sclose>:
 80058d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058da:	f000 b8d3 	b.w	8005a84 <_close_r>
	...

080058e0 <__swbuf_r>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	460e      	mov	r6, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	4605      	mov	r5, r0
 80058e8:	b118      	cbz	r0, 80058f2 <__swbuf_r+0x12>
 80058ea:	6983      	ldr	r3, [r0, #24]
 80058ec:	b90b      	cbnz	r3, 80058f2 <__swbuf_r+0x12>
 80058ee:	f7ff fb81 	bl	8004ff4 <__sinit>
 80058f2:	4b21      	ldr	r3, [pc, #132]	; (8005978 <__swbuf_r+0x98>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d12b      	bne.n	8005950 <__swbuf_r+0x70>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	69a3      	ldr	r3, [r4, #24]
 80058fc:	60a3      	str	r3, [r4, #8]
 80058fe:	89a3      	ldrh	r3, [r4, #12]
 8005900:	071a      	lsls	r2, r3, #28
 8005902:	d52f      	bpl.n	8005964 <__swbuf_r+0x84>
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	b36b      	cbz	r3, 8005964 <__swbuf_r+0x84>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	6820      	ldr	r0, [r4, #0]
 800590c:	1ac0      	subs	r0, r0, r3
 800590e:	6963      	ldr	r3, [r4, #20]
 8005910:	b2f6      	uxtb	r6, r6
 8005912:	4283      	cmp	r3, r0
 8005914:	4637      	mov	r7, r6
 8005916:	dc04      	bgt.n	8005922 <__swbuf_r+0x42>
 8005918:	4621      	mov	r1, r4
 800591a:	4628      	mov	r0, r5
 800591c:	f000 f948 	bl	8005bb0 <_fflush_r>
 8005920:	bb30      	cbnz	r0, 8005970 <__swbuf_r+0x90>
 8005922:	68a3      	ldr	r3, [r4, #8]
 8005924:	3b01      	subs	r3, #1
 8005926:	60a3      	str	r3, [r4, #8]
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	6022      	str	r2, [r4, #0]
 800592e:	701e      	strb	r6, [r3, #0]
 8005930:	6963      	ldr	r3, [r4, #20]
 8005932:	3001      	adds	r0, #1
 8005934:	4283      	cmp	r3, r0
 8005936:	d004      	beq.n	8005942 <__swbuf_r+0x62>
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	07db      	lsls	r3, r3, #31
 800593c:	d506      	bpl.n	800594c <__swbuf_r+0x6c>
 800593e:	2e0a      	cmp	r6, #10
 8005940:	d104      	bne.n	800594c <__swbuf_r+0x6c>
 8005942:	4621      	mov	r1, r4
 8005944:	4628      	mov	r0, r5
 8005946:	f000 f933 	bl	8005bb0 <_fflush_r>
 800594a:	b988      	cbnz	r0, 8005970 <__swbuf_r+0x90>
 800594c:	4638      	mov	r0, r7
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <__swbuf_r+0x9c>)
 8005952:	429c      	cmp	r4, r3
 8005954:	d101      	bne.n	800595a <__swbuf_r+0x7a>
 8005956:	68ac      	ldr	r4, [r5, #8]
 8005958:	e7cf      	b.n	80058fa <__swbuf_r+0x1a>
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <__swbuf_r+0xa0>)
 800595c:	429c      	cmp	r4, r3
 800595e:	bf08      	it	eq
 8005960:	68ec      	ldreq	r4, [r5, #12]
 8005962:	e7ca      	b.n	80058fa <__swbuf_r+0x1a>
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 f81e 	bl	80059a8 <__swsetup_r>
 800596c:	2800      	cmp	r0, #0
 800596e:	d0cb      	beq.n	8005908 <__swbuf_r+0x28>
 8005970:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005974:	e7ea      	b.n	800594c <__swbuf_r+0x6c>
 8005976:	bf00      	nop
 8005978:	08005ecc 	.word	0x08005ecc
 800597c:	08005eec 	.word	0x08005eec
 8005980:	08005eac 	.word	0x08005eac

08005984 <_write_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d07      	ldr	r5, [pc, #28]	; (80059a4 <_write_r+0x20>)
 8005988:	4604      	mov	r4, r0
 800598a:	4608      	mov	r0, r1
 800598c:	4611      	mov	r1, r2
 800598e:	2200      	movs	r2, #0
 8005990:	602a      	str	r2, [r5, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	f7fa fe18 	bl	80005c8 <_write>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_write_r+0x1e>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_write_r+0x1e>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200001bc 	.word	0x200001bc

080059a8 <__swsetup_r>:
 80059a8:	4b32      	ldr	r3, [pc, #200]	; (8005a74 <__swsetup_r+0xcc>)
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	681d      	ldr	r5, [r3, #0]
 80059ae:	4606      	mov	r6, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	b125      	cbz	r5, 80059be <__swsetup_r+0x16>
 80059b4:	69ab      	ldr	r3, [r5, #24]
 80059b6:	b913      	cbnz	r3, 80059be <__swsetup_r+0x16>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7ff fb1b 	bl	8004ff4 <__sinit>
 80059be:	4b2e      	ldr	r3, [pc, #184]	; (8005a78 <__swsetup_r+0xd0>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d10f      	bne.n	80059e4 <__swsetup_r+0x3c>
 80059c4:	686c      	ldr	r4, [r5, #4]
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059cc:	0719      	lsls	r1, r3, #28
 80059ce:	d42c      	bmi.n	8005a2a <__swsetup_r+0x82>
 80059d0:	06dd      	lsls	r5, r3, #27
 80059d2:	d411      	bmi.n	80059f8 <__swsetup_r+0x50>
 80059d4:	2309      	movs	r3, #9
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e2:	e03e      	b.n	8005a62 <__swsetup_r+0xba>
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <__swsetup_r+0xd4>)
 80059e6:	429c      	cmp	r4, r3
 80059e8:	d101      	bne.n	80059ee <__swsetup_r+0x46>
 80059ea:	68ac      	ldr	r4, [r5, #8]
 80059ec:	e7eb      	b.n	80059c6 <__swsetup_r+0x1e>
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <__swsetup_r+0xd8>)
 80059f0:	429c      	cmp	r4, r3
 80059f2:	bf08      	it	eq
 80059f4:	68ec      	ldreq	r4, [r5, #12]
 80059f6:	e7e6      	b.n	80059c6 <__swsetup_r+0x1e>
 80059f8:	0758      	lsls	r0, r3, #29
 80059fa:	d512      	bpl.n	8005a22 <__swsetup_r+0x7a>
 80059fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059fe:	b141      	cbz	r1, 8005a12 <__swsetup_r+0x6a>
 8005a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a04:	4299      	cmp	r1, r3
 8005a06:	d002      	beq.n	8005a0e <__swsetup_r+0x66>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f991 	bl	8005d30 <_free_r>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6363      	str	r3, [r4, #52]	; 0x34
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6063      	str	r3, [r4, #4]
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f043 0308 	orr.w	r3, r3, #8
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	b94b      	cbnz	r3, 8005a42 <__swsetup_r+0x9a>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a38:	d003      	beq.n	8005a42 <__swsetup_r+0x9a>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f000 f92b 	bl	8005c98 <__smakebuf_r>
 8005a42:	89a0      	ldrh	r0, [r4, #12]
 8005a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a48:	f010 0301 	ands.w	r3, r0, #1
 8005a4c:	d00a      	beq.n	8005a64 <__swsetup_r+0xbc>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	6963      	ldr	r3, [r4, #20]
 8005a54:	425b      	negs	r3, r3
 8005a56:	61a3      	str	r3, [r4, #24]
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	b943      	cbnz	r3, 8005a6e <__swsetup_r+0xc6>
 8005a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a60:	d1ba      	bne.n	80059d8 <__swsetup_r+0x30>
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	0781      	lsls	r1, r0, #30
 8005a66:	bf58      	it	pl
 8005a68:	6963      	ldrpl	r3, [r4, #20]
 8005a6a:	60a3      	str	r3, [r4, #8]
 8005a6c:	e7f4      	b.n	8005a58 <__swsetup_r+0xb0>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7f7      	b.n	8005a62 <__swsetup_r+0xba>
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c
 8005a78:	08005ecc 	.word	0x08005ecc
 8005a7c:	08005eec 	.word	0x08005eec
 8005a80:	08005eac 	.word	0x08005eac

08005a84 <_close_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d06      	ldr	r5, [pc, #24]	; (8005aa0 <_close_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	f7fb f971 	bl	8000d76 <_close>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_close_r+0x1a>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_close_r+0x1a>
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200001bc 	.word	0x200001bc

08005aa4 <__sflush_r>:
 8005aa4:	898a      	ldrh	r2, [r1, #12]
 8005aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	4605      	mov	r5, r0
 8005aac:	0710      	lsls	r0, r2, #28
 8005aae:	460c      	mov	r4, r1
 8005ab0:	d458      	bmi.n	8005b64 <__sflush_r+0xc0>
 8005ab2:	684b      	ldr	r3, [r1, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dc05      	bgt.n	8005ac4 <__sflush_r+0x20>
 8005ab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dc02      	bgt.n	8005ac4 <__sflush_r+0x20>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	d0f9      	beq.n	8005abe <__sflush_r+0x1a>
 8005aca:	2300      	movs	r3, #0
 8005acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ad0:	682f      	ldr	r7, [r5, #0]
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	d032      	beq.n	8005b3c <__sflush_r+0x98>
 8005ad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	075a      	lsls	r2, r3, #29
 8005adc:	d505      	bpl.n	8005aea <__sflush_r+0x46>
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	1ac0      	subs	r0, r0, r3
 8005ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ae4:	b10b      	cbz	r3, 8005aea <__sflush_r+0x46>
 8005ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ae8:	1ac0      	subs	r0, r0, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	4602      	mov	r2, r0
 8005aee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005af0:	6a21      	ldr	r1, [r4, #32]
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b0      	blx	r6
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	d106      	bne.n	8005b0a <__sflush_r+0x66>
 8005afc:	6829      	ldr	r1, [r5, #0]
 8005afe:	291d      	cmp	r1, #29
 8005b00:	d82c      	bhi.n	8005b5c <__sflush_r+0xb8>
 8005b02:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <__sflush_r+0x108>)
 8005b04:	40ca      	lsrs	r2, r1
 8005b06:	07d6      	lsls	r6, r2, #31
 8005b08:	d528      	bpl.n	8005b5c <__sflush_r+0xb8>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	6062      	str	r2, [r4, #4]
 8005b0e:	04d9      	lsls	r1, r3, #19
 8005b10:	6922      	ldr	r2, [r4, #16]
 8005b12:	6022      	str	r2, [r4, #0]
 8005b14:	d504      	bpl.n	8005b20 <__sflush_r+0x7c>
 8005b16:	1c42      	adds	r2, r0, #1
 8005b18:	d101      	bne.n	8005b1e <__sflush_r+0x7a>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	b903      	cbnz	r3, 8005b20 <__sflush_r+0x7c>
 8005b1e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b22:	602f      	str	r7, [r5, #0]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d0ca      	beq.n	8005abe <__sflush_r+0x1a>
 8005b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b2c:	4299      	cmp	r1, r3
 8005b2e:	d002      	beq.n	8005b36 <__sflush_r+0x92>
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 f8fd 	bl	8005d30 <_free_r>
 8005b36:	2000      	movs	r0, #0
 8005b38:	6360      	str	r0, [r4, #52]	; 0x34
 8005b3a:	e7c1      	b.n	8005ac0 <__sflush_r+0x1c>
 8005b3c:	6a21      	ldr	r1, [r4, #32]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b0      	blx	r6
 8005b44:	1c41      	adds	r1, r0, #1
 8005b46:	d1c7      	bne.n	8005ad8 <__sflush_r+0x34>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0c4      	beq.n	8005ad8 <__sflush_r+0x34>
 8005b4e:	2b1d      	cmp	r3, #29
 8005b50:	d001      	beq.n	8005b56 <__sflush_r+0xb2>
 8005b52:	2b16      	cmp	r3, #22
 8005b54:	d101      	bne.n	8005b5a <__sflush_r+0xb6>
 8005b56:	602f      	str	r7, [r5, #0]
 8005b58:	e7b1      	b.n	8005abe <__sflush_r+0x1a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	e7ad      	b.n	8005ac0 <__sflush_r+0x1c>
 8005b64:	690f      	ldr	r7, [r1, #16]
 8005b66:	2f00      	cmp	r7, #0
 8005b68:	d0a9      	beq.n	8005abe <__sflush_r+0x1a>
 8005b6a:	0793      	lsls	r3, r2, #30
 8005b6c:	680e      	ldr	r6, [r1, #0]
 8005b6e:	bf08      	it	eq
 8005b70:	694b      	ldreq	r3, [r1, #20]
 8005b72:	600f      	str	r7, [r1, #0]
 8005b74:	bf18      	it	ne
 8005b76:	2300      	movne	r3, #0
 8005b78:	eba6 0807 	sub.w	r8, r6, r7
 8005b7c:	608b      	str	r3, [r1, #8]
 8005b7e:	f1b8 0f00 	cmp.w	r8, #0
 8005b82:	dd9c      	ble.n	8005abe <__sflush_r+0x1a>
 8005b84:	6a21      	ldr	r1, [r4, #32]
 8005b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b88:	4643      	mov	r3, r8
 8005b8a:	463a      	mov	r2, r7
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b0      	blx	r6
 8005b90:	2800      	cmp	r0, #0
 8005b92:	dc06      	bgt.n	8005ba2 <__sflush_r+0xfe>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba0:	e78e      	b.n	8005ac0 <__sflush_r+0x1c>
 8005ba2:	4407      	add	r7, r0
 8005ba4:	eba8 0800 	sub.w	r8, r8, r0
 8005ba8:	e7e9      	b.n	8005b7e <__sflush_r+0xda>
 8005baa:	bf00      	nop
 8005bac:	20400001 	.word	0x20400001

08005bb0 <_fflush_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	b913      	cbnz	r3, 8005bc0 <_fflush_r+0x10>
 8005bba:	2500      	movs	r5, #0
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	b118      	cbz	r0, 8005bca <_fflush_r+0x1a>
 8005bc2:	6983      	ldr	r3, [r0, #24]
 8005bc4:	b90b      	cbnz	r3, 8005bca <_fflush_r+0x1a>
 8005bc6:	f7ff fa15 	bl	8004ff4 <__sinit>
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <_fflush_r+0x6c>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d11b      	bne.n	8005c08 <_fflush_r+0x58>
 8005bd0:	686c      	ldr	r4, [r5, #4]
 8005bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ef      	beq.n	8005bba <_fflush_r+0xa>
 8005bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bdc:	07d0      	lsls	r0, r2, #31
 8005bde:	d404      	bmi.n	8005bea <_fflush_r+0x3a>
 8005be0:	0599      	lsls	r1, r3, #22
 8005be2:	d402      	bmi.n	8005bea <_fflush_r+0x3a>
 8005be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be6:	f7ff faa3 	bl	8005130 <__retarget_lock_acquire_recursive>
 8005bea:	4628      	mov	r0, r5
 8005bec:	4621      	mov	r1, r4
 8005bee:	f7ff ff59 	bl	8005aa4 <__sflush_r>
 8005bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf4:	07da      	lsls	r2, r3, #31
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	d4e0      	bmi.n	8005bbc <_fflush_r+0xc>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	059b      	lsls	r3, r3, #22
 8005bfe:	d4dd      	bmi.n	8005bbc <_fflush_r+0xc>
 8005c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c02:	f7ff fa96 	bl	8005132 <__retarget_lock_release_recursive>
 8005c06:	e7d9      	b.n	8005bbc <_fflush_r+0xc>
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <_fflush_r+0x70>)
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d101      	bne.n	8005c12 <_fflush_r+0x62>
 8005c0e:	68ac      	ldr	r4, [r5, #8]
 8005c10:	e7df      	b.n	8005bd2 <_fflush_r+0x22>
 8005c12:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <_fflush_r+0x74>)
 8005c14:	429c      	cmp	r4, r3
 8005c16:	bf08      	it	eq
 8005c18:	68ec      	ldreq	r4, [r5, #12]
 8005c1a:	e7da      	b.n	8005bd2 <_fflush_r+0x22>
 8005c1c:	08005ecc 	.word	0x08005ecc
 8005c20:	08005eec 	.word	0x08005eec
 8005c24:	08005eac 	.word	0x08005eac

08005c28 <_lseek_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d07      	ldr	r5, [pc, #28]	; (8005c48 <_lseek_r+0x20>)
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	4608      	mov	r0, r1
 8005c30:	4611      	mov	r1, r2
 8005c32:	2200      	movs	r2, #0
 8005c34:	602a      	str	r2, [r5, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f7fb f8c4 	bl	8000dc4 <_lseek>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d102      	bne.n	8005c46 <_lseek_r+0x1e>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	b103      	cbz	r3, 8005c46 <_lseek_r+0x1e>
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	200001bc 	.word	0x200001bc

08005c4c <__swhatbuf_r>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	460e      	mov	r6, r1
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	2900      	cmp	r1, #0
 8005c56:	b096      	sub	sp, #88	; 0x58
 8005c58:	4614      	mov	r4, r2
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	da08      	bge.n	8005c70 <__swhatbuf_r+0x24>
 8005c5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	061a      	lsls	r2, r3, #24
 8005c68:	d410      	bmi.n	8005c8c <__swhatbuf_r+0x40>
 8005c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6e:	e00e      	b.n	8005c8e <__swhatbuf_r+0x42>
 8005c70:	466a      	mov	r2, sp
 8005c72:	f000 f8bb 	bl	8005dec <_fstat_r>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	dbf1      	blt.n	8005c5e <__swhatbuf_r+0x12>
 8005c7a:	9a01      	ldr	r2, [sp, #4]
 8005c7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c84:	425a      	negs	r2, r3
 8005c86:	415a      	adcs	r2, r3
 8005c88:	602a      	str	r2, [r5, #0]
 8005c8a:	e7ee      	b.n	8005c6a <__swhatbuf_r+0x1e>
 8005c8c:	2340      	movs	r3, #64	; 0x40
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	b016      	add	sp, #88	; 0x58
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c98 <__smakebuf_r>:
 8005c98:	898b      	ldrh	r3, [r1, #12]
 8005c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c9c:	079d      	lsls	r5, r3, #30
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	d507      	bpl.n	8005cb4 <__smakebuf_r+0x1c>
 8005ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	2301      	movs	r3, #1
 8005cae:	6163      	str	r3, [r4, #20]
 8005cb0:	b002      	add	sp, #8
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	ab01      	add	r3, sp, #4
 8005cb6:	466a      	mov	r2, sp
 8005cb8:	f7ff ffc8 	bl	8005c4c <__swhatbuf_r>
 8005cbc:	9900      	ldr	r1, [sp, #0]
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff fa57 	bl	8005174 <_malloc_r>
 8005cc6:	b948      	cbnz	r0, 8005cdc <__smakebuf_r+0x44>
 8005cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d4ef      	bmi.n	8005cb0 <__smakebuf_r+0x18>
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7e3      	b.n	8005ca4 <__smakebuf_r+0xc>
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <__smakebuf_r+0x7c>)
 8005cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	6020      	str	r0, [r4, #0]
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	6163      	str	r3, [r4, #20]
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	6120      	str	r0, [r4, #16]
 8005cf2:	b15b      	cbz	r3, 8005d0c <__smakebuf_r+0x74>
 8005cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f889 	bl	8005e10 <_isatty_r>
 8005cfe:	b128      	cbz	r0, 8005d0c <__smakebuf_r+0x74>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	89a0      	ldrh	r0, [r4, #12]
 8005d0e:	4305      	orrs	r5, r0
 8005d10:	81a5      	strh	r5, [r4, #12]
 8005d12:	e7cd      	b.n	8005cb0 <__smakebuf_r+0x18>
 8005d14:	08004f8d 	.word	0x08004f8d

08005d18 <__malloc_lock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_lock+0x8>)
 8005d1a:	f7ff ba09 	b.w	8005130 <__retarget_lock_acquire_recursive>
 8005d1e:	bf00      	nop
 8005d20:	200001b0 	.word	0x200001b0

08005d24 <__malloc_unlock>:
 8005d24:	4801      	ldr	r0, [pc, #4]	; (8005d2c <__malloc_unlock+0x8>)
 8005d26:	f7ff ba04 	b.w	8005132 <__retarget_lock_release_recursive>
 8005d2a:	bf00      	nop
 8005d2c:	200001b0 	.word	0x200001b0

08005d30 <_free_r>:
 8005d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d044      	beq.n	8005dc0 <_free_r+0x90>
 8005d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3a:	9001      	str	r0, [sp, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d42:	bfb8      	it	lt
 8005d44:	18e4      	addlt	r4, r4, r3
 8005d46:	f7ff ffe7 	bl	8005d18 <__malloc_lock>
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <_free_r+0x94>)
 8005d4c:	9801      	ldr	r0, [sp, #4]
 8005d4e:	6813      	ldr	r3, [r2, #0]
 8005d50:	b933      	cbnz	r3, 8005d60 <_free_r+0x30>
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	6014      	str	r4, [r2, #0]
 8005d56:	b003      	add	sp, #12
 8005d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d5c:	f7ff bfe2 	b.w	8005d24 <__malloc_unlock>
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d908      	bls.n	8005d76 <_free_r+0x46>
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	1961      	adds	r1, r4, r5
 8005d68:	428b      	cmp	r3, r1
 8005d6a:	bf01      	itttt	eq
 8005d6c:	6819      	ldreq	r1, [r3, #0]
 8005d6e:	685b      	ldreq	r3, [r3, #4]
 8005d70:	1949      	addeq	r1, r1, r5
 8005d72:	6021      	streq	r1, [r4, #0]
 8005d74:	e7ed      	b.n	8005d52 <_free_r+0x22>
 8005d76:	461a      	mov	r2, r3
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	b10b      	cbz	r3, 8005d80 <_free_r+0x50>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d9fa      	bls.n	8005d76 <_free_r+0x46>
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	1855      	adds	r5, r2, r1
 8005d84:	42a5      	cmp	r5, r4
 8005d86:	d10b      	bne.n	8005da0 <_free_r+0x70>
 8005d88:	6824      	ldr	r4, [r4, #0]
 8005d8a:	4421      	add	r1, r4
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	d1e0      	bne.n	8005d56 <_free_r+0x26>
 8005d94:	681c      	ldr	r4, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	6053      	str	r3, [r2, #4]
 8005d9a:	4421      	add	r1, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	e7da      	b.n	8005d56 <_free_r+0x26>
 8005da0:	d902      	bls.n	8005da8 <_free_r+0x78>
 8005da2:	230c      	movs	r3, #12
 8005da4:	6003      	str	r3, [r0, #0]
 8005da6:	e7d6      	b.n	8005d56 <_free_r+0x26>
 8005da8:	6825      	ldr	r5, [r4, #0]
 8005daa:	1961      	adds	r1, r4, r5
 8005dac:	428b      	cmp	r3, r1
 8005dae:	bf04      	itt	eq
 8005db0:	6819      	ldreq	r1, [r3, #0]
 8005db2:	685b      	ldreq	r3, [r3, #4]
 8005db4:	6063      	str	r3, [r4, #4]
 8005db6:	bf04      	itt	eq
 8005db8:	1949      	addeq	r1, r1, r5
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	6054      	str	r4, [r2, #4]
 8005dbe:	e7ca      	b.n	8005d56 <_free_r+0x26>
 8005dc0:	b003      	add	sp, #12
 8005dc2:	bd30      	pop	{r4, r5, pc}
 8005dc4:	200001b4 	.word	0x200001b4

08005dc8 <_read_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d07      	ldr	r5, [pc, #28]	; (8005de8 <_read_r+0x20>)
 8005dcc:	4604      	mov	r4, r0
 8005dce:	4608      	mov	r0, r1
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	602a      	str	r2, [r5, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f7fa ffb0 	bl	8000d3c <_read>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_read_r+0x1e>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_read_r+0x1e>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	200001bc 	.word	0x200001bc

08005dec <_fstat_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_fstat_r+0x20>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	f7fa ffc8 	bl	8000d8e <_fstat>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d102      	bne.n	8005e08 <_fstat_r+0x1c>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	b103      	cbz	r3, 8005e08 <_fstat_r+0x1c>
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200001bc 	.word	0x200001bc

08005e10 <_isatty_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d06      	ldr	r5, [pc, #24]	; (8005e2c <_isatty_r+0x1c>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fa ffc7 	bl	8000dae <_isatty>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_isatty_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_isatty_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	200001bc 	.word	0x200001bc

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
